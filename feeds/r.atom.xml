<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Le blog - R</title><link href="https://blog.statoscop.fr/" rel="alternate"></link><link href="https://blog.statoscop.fr/feeds/r.atom.xml" rel="self"></link><id>https://blog.statoscop.fr/</id><updated>2023-11-28T00:00:00+01:00</updated><entry><title>Coder des fonctions dans le tidyverse</title><link href="https://blog.statoscop.fr/coder-des-fonctions-dans-le-tidyverse.html" rel="alternate"></link><published>2023-11-28T00:00:00+01:00</published><updated>2023-11-28T00:00:00+01:00</updated><author><name>Antoine</name></author><id>tag:blog.statoscop.fr,2023-11-28:/coder-des-fonctions-dans-le-tidyverse.html</id><summary type="html">&lt;p&gt;Quelques trucs pour coder facilement ses propres fonctions en utilisant la syntaxe du tidyverse.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table des matières&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#le-tidyverse-et-levaluation-non-standard"&gt;Le tidyverse et l'évaluation non standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#faire-reference-aux-parametres-de-ma-fonction"&gt;Faire référence aux paramètres de ma fonction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#parametres-renseignes-en-symboles"&gt;Paramètres renseignés en symboles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parametres-renseignes-en-chaines-de-caracteres"&gt;Paramètres renseignés en chaînes de caractères&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nommer-des-variables-en-fonction-des-parametres"&gt;Nommer des variables en fonction des paramètres&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#coder-une-fonction-avec-nimporte-quel-nombre-de-parametres"&gt;Coder une fonction avec n'importe quel nombre de paramètres&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#utilisation-dacross"&gt;Utilisation d'across&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utilisation-de-pick-et"&gt;Utilisation de pick et ...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Dans cet article, on s'intéresse aux manières de coder des fonctions en utilisant la syntaxe du &lt;code&gt;tidyverse&lt;/code&gt;. Après avoir rappelé quelques principes de l'évaluation non standard dans le tidyverse, on présente concrètement les manières de faire référence aux paramètres de notre fonction, qu'ils soient renseignés sous forme de symboles ou de chaînes de caractères. On termine avec des astuces pour coder des fonctions plus flexibles, notamment sans avoir à fixer le nombre de paramètres en amont.&lt;/p&gt;
&lt;h1 id="le-tidyverse-et-levaluation-non-standard"&gt;Le tidyverse et l'évaluation non standard&lt;/h1&gt;
&lt;p&gt;La syntaxe du &lt;code&gt;tidyverse&lt;/code&gt; s'appuie sur des fonctions aux noms explicites et une grande facilité d'utilisation. Le principe est de rendre le code le plus lisible possible. Tout cela permet de coder de manière intuitive et peu verbeuse. Mais lorsqu'il s'agit de coder ses propres fonctions, les choses se compliquent. Prenons par exemple la fonction suivante, qui permet de donner le nombre d'observations d'un dataframe dont une valeur numérique est inférieure à un certain seuil :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dplyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## &lt;/span&gt;
&lt;span class="c1"&gt;## Attachement du package : &amp;#39;dplyr&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;## Les objets suivants sont masqués depuis &amp;#39;package:stats&amp;#39;:&lt;/span&gt;
&lt;span class="c1"&gt;## &lt;/span&gt;
&lt;span class="c1"&gt;##     filter, lag&lt;/span&gt;
&lt;span class="c1"&gt;## Les objets suivants sont masqués depuis &amp;#39;package:base&amp;#39;:&lt;/span&gt;
&lt;span class="c1"&gt;## &lt;/span&gt;
&lt;span class="c1"&gt;##     intersect, setdiff, setequal, union&lt;/span&gt;

&lt;span class="n"&gt;my_filter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;L'appel de cette fonction pour obtenir le nombre de voitures avec &lt;code&gt;mpg &amp;lt;= 20&lt;/code&gt; donne l'erreur suivante:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;my_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mpg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## Error in `filter()`:&lt;/span&gt;
&lt;span class="c1"&gt;## ℹ In argument: `x1 &amp;lt;= seuil`.&lt;/span&gt;
&lt;span class="c1"&gt;## Caused by error:&lt;/span&gt;
&lt;span class="c1"&gt;## ! objet &amp;#39;mpg&amp;#39; introuvable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cette erreur est la conséquence d'une propriété importante du &lt;code&gt;tidyverse&lt;/code&gt; : le &lt;strong&gt;data masking&lt;/strong&gt;. C'est ce qui fait que les verbes de dplyr évaluent l'appel d'une fonction à un objet au sein du dataframe auquel elle s'applique. Ainsi, on fait appel à des fonctions avec la syntaxe fonction(data, var1, var2, var3) et non fonction(data&lt;span class="math"&gt;\(var1, data\)&lt;/span&gt;var2, data$var3). Couplé à l'utilisation du &lt;em&gt;pipe&lt;/em&gt; (que ce soit le &lt;code&gt;%&amp;gt;%&lt;/code&gt; de &lt;code&gt;magritr&lt;/code&gt; ou le récent &lt;code&gt;|&amp;gt;&lt;/code&gt; de R auquel nous commençons à nous convertir), cette fonctionnalité permet d'obtenir un code bien plus aisé et agréable à écrire et à lire. Ainsi, dans &lt;code&gt;dplyr&lt;/code&gt;, on considère un peu &lt;strong&gt;le dataframe comme un environnement&lt;/strong&gt; et les colonnes de ce dataframe comme des éléments de cet environnement. &lt;/p&gt;
&lt;p&gt;Seulement voilà, cette évaluation n'est pas non-standard pour rien : ici lors de l'appel de &lt;code&gt;my_filter&lt;/code&gt; l'objet &lt;code&gt;mpg&lt;/code&gt; est cherché dans l'environnement et il n'est pas trouvé. Et pour cause : il n'existe pas, contrairement à &lt;code&gt;mtcars$mpg&lt;/code&gt;. &lt;/p&gt;
&lt;h1 id="faire-reference-aux-parametres-de-ma-fonction"&gt;Faire référence aux paramètres de ma fonction&lt;/h1&gt;
&lt;p&gt;Comment donc coder comme un développeur de Posit et profiter de cette syntaxe avantageuse? Si les choses ne sont pas aussi simples et intuitives qu'avec base R, elles se sont récemment simplifiées et ne devraient pas vous poser trop de problèmes.  &lt;/p&gt;
&lt;h2 id="parametres-renseignes-en-symboles"&gt;Paramètres renseignés en symboles&lt;/h2&gt;
&lt;p&gt;Si les paramètres sont renseignés "en dur", ou en symboles, comme c'est le cas dans les verbes de &lt;code&gt;dplyr&lt;/code&gt;, on privilégiera l'écriture &lt;code&gt;{{ var }}&lt;/code&gt;. Elle s'est récemment substituée à l'ancienne option, plus énigmatique, de &lt;code&gt;!!enquo(var)&lt;/code&gt;. &lt;br&gt;
Testons cela sur notre petite fonction :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_filter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;my_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mpg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## [1] 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Merveilleux! Mais si, pour une raison ou pour une autre, vous souhaiteriez que l'utilisateur de votre fonction entre le paramètre sous forme de chaîne de caractère?&lt;/p&gt;
&lt;h2 id="parametres-renseignes-en-chaines-de-caracteres"&gt;Paramètres renseignés en chaînes de caractères&lt;/h2&gt;
&lt;p&gt;Dans ce cas, on revient à une notation classique de base R : &lt;code&gt;df[["var"]]&lt;/code&gt;. Sauf que, dans un contexte d'expressions chaînées, on va utiliser la notation bien utile &lt;code&gt;.data[["var"]]&lt;/code&gt; qui fait référence au dataframe de la chaîne d'expression &lt;strong&gt;dans son état au moment de l'appel&lt;/strong&gt;. En effet, si je voulais faire référence au dataframe par son nom je pourrais me retrouver dans cette situation :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mpg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;transmute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carb_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;carb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## Error in `transmute()`:&lt;/span&gt;
&lt;span class="c1"&gt;## ℹ In argument: `carb_2 = mtcars[[&amp;quot;carb&amp;quot;]]^2`.&lt;/span&gt;
&lt;span class="c1"&gt;## Caused by error:&lt;/span&gt;
&lt;span class="c1"&gt;## ! `carb_2` must be size 18 or 1, not 32.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Les tailles des vecteurs ne correspondent pas! En effet, le filtre appliqué n'est pas pris en compte au moment de l'appel à la variable &lt;code&gt;carb&lt;/code&gt;. La notation &lt;code&gt;.data&lt;/code&gt; résoud bien ce souci :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mpg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;transmute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carb_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;.data&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;carb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;##                   carb_2&lt;/span&gt;
&lt;span class="c1"&gt;## Hornet Sportabout      4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour en revenir à notre fonction, il est donc très aisé avec cette notation de définir le paramètre en chaîne de caractères :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_filter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;.data&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;my_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## [1] 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mais si vous préférez l'ancienne notation, pour les paramètres renseignés en chaînes de caractères c'est la suivante :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_filter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nf"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;my_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## [1] 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="nommer-des-variables-en-fonction-des-parametres"&gt;Nommer des variables en fonction des paramètres&lt;/h2&gt;
&lt;p&gt;Imaginons maintenant que nous voulions créer une indicatrice en fonction du seuil d'une variable numérique, et que nous aimerions nommer cette indicatrice en fonction de la variable numérique qu'elle décrit :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_indic&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1_indic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;if_else&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dans cette version ma nouvelle variable va s'appeler &lt;code&gt;x1_indic&lt;/code&gt;, et non prendre le nom de la variable numérique de &lt;code&gt;x1&lt;/code&gt;. Et là encore c'est la double accolade qui va nous permettre de résoudre ce problème, mais pas seulement. Pour cela, on fait &lt;strong&gt;référence au nom du paramètre au sein d'une double accolade&lt;/strong&gt;. De plus, le nom de la variable ainsi créée est donné entre guillemets. On peut également ajouter d'autres caractères. Enfin, &lt;strong&gt;le signe &lt;code&gt;=&lt;/code&gt; doit être remplacé par &lt;code&gt;:=&lt;/code&gt;&lt;/strong&gt;. Cela donne :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_indic&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ x1 }}_indic&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nf"&gt;if_else&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On vérifie avec &lt;code&gt;mpg&lt;/code&gt; que la variable &lt;code&gt;mpg_indic&lt;/code&gt; est bien créé :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;my_indic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mpg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seuil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mpg_indic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;##   mpg_indic  n&lt;/span&gt;
&lt;span class="c1"&gt;## 1         0 14&lt;/span&gt;
&lt;span class="c1"&gt;## 2         1 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="coder-une-fonction-avec-nimporte-quel-nombre-de-parametres"&gt;Coder une fonction avec n'importe quel nombre de paramètres&lt;/h1&gt;
&lt;p&gt;Essayons maintenant d'aller un peu plus loin! On explore dans cette partie &lt;strong&gt;des manières plus flexibles de coder nos fonctions&lt;/strong&gt;, sans fixer à l'avance le nombre de paramètres.  &lt;/p&gt;
&lt;h2 id="utilisation-dacross"&gt;Utilisation d'&lt;code&gt;across&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;La solution la plus directe pour permettre à l'utilisateur de votre fonction de définir le nombre de paramètres qu'il souhaite est en général d'utiliser la puissance d'&lt;code&gt;across()&lt;/code&gt;. On parle de manière détaillée de ce verbe dans &lt;a href="https://blog.statoscop.fr/fonctionnement-et-performances-dacross-dans-dplyr.html"&gt;cet article de notre blog&lt;/a&gt;. Vous pouvez également explorer toutes ses possibilités dans &lt;a href="https://www.icem7.fr/r/across-plus-puissant-flexible-quil-ny-parait/"&gt;cet article du blog d'Icem7&lt;/a&gt;. &lt;br&gt;
Dans le cas d'une fonction, c'est aussi la syntaxe &lt;code&gt;{{ var }}&lt;/code&gt; qui nous permettra de l'utiliser. Imaginez par exemple que vous souhaitiez créer une fonction permettant des statistiques sur un certain nombre de variables définies par l'utilisateur. Une telle fonction s'écrirait ainsi :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mean_multiple_var&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On peut ensuite appeler la fonction en définissant &lt;strong&gt;le paramètre &lt;code&gt;vars_mean&lt;/code&gt; comme un vecteur de symboles&lt;/strong&gt;, ou comme un seul symbole dans le cas où on ne voudrait la moyenne que d'une variable :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;mean_multiple_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;##       disp&lt;/span&gt;
&lt;span class="c1"&gt;## 1 230.7219&lt;/span&gt;
&lt;span class="nf"&gt;mean_multiple_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mpg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;disp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qsec&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;##        mpg     disp     qsec&lt;/span&gt;
&lt;span class="c1"&gt;## 1 20.09062 230.7219 17.84875&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si nous souhaitons que l'utilisateur entre un vecteur de chaînes de caractères, cela fonctionne aussi car &lt;strong&gt;across utilise la tidyselection&lt;/strong&gt; qui tolère les appels aux vecteurs de chaînes de caractères. Il faut juste l'encapsuler dans une fonction appropriée, ici &lt;code&gt;all_of()&lt;/code&gt; pour sélectionner tous les éléments du vecteur :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mean_multiple_var2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;all_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars_mean&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;mean_multiple_var2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;disp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;qsec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;##        mpg     disp     qsec&lt;/span&gt;
&lt;span class="c1"&gt;## 1 20.09062 230.7219 17.84875&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notez qu'avec &lt;code&gt;any_of()&lt;/code&gt;, on autorise l'utilisateur à entre &lt;strong&gt;des noms de colonnes n'existant pas dans le dataframe&lt;/strong&gt;. Ils sont alors juste écartés de la sélection, sans que cela génère des erreurs :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mean_multiple_var3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;any_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars_mean&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;mean_multiple_var3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sepal.Length&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sepal.Width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;disp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;qsec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;##        mpg     disp     qsec&lt;/span&gt;
&lt;span class="c1"&gt;## 1 20.09062 230.7219 17.84875&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enfin, on peut utiliser l'argument &lt;code&gt;.names&lt;/code&gt; de la fonction &lt;code&gt;across&lt;/code&gt; pour permettre un &lt;strong&gt;renommage des variables au souhait de l'utilisateur&lt;/strong&gt; :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mean_multiple_var2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefixe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;all_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars_mean&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;.names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{prefixe}_{.col}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;mean_multiple_var2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;disp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;qsec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;##   mean_mpg mean_disp mean_qsec&lt;/span&gt;
&lt;span class="c1"&gt;## 1 20.09062  230.7219  17.84875&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dans cette version, l'utilisateur peut &lt;strong&gt;paramétrer le préfixe qu'il souhaite&lt;/strong&gt;, grâce à l'utilisation de la syntaxe propre au &lt;a href="https://glue.tidyverse.org/"&gt;package &lt;code&gt;glue&lt;/code&gt;&lt;/a&gt;. Notez l'utilisation de &lt;code&gt;.col&lt;/code&gt;, interne à &lt;code&gt;across()&lt;/code&gt;, pour faire référence au nom de la variable.   &lt;/p&gt;
&lt;h2 id="utilisation-de-pick-et"&gt;Utilisation de &lt;code&gt;pick&lt;/code&gt; et &lt;code&gt;...&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pick()&lt;/code&gt; (à partir de dplyr &amp;gt;= 1.1.4) permet de sélectionner un nombre indéterminé de paramètres dans les fonctions du type &lt;code&gt;group_by()&lt;/code&gt;, &lt;code&gt;select()&lt;/code&gt;...c'est-à-dire les fonctions permettant de sélectionner un sous-ensemble de la base. C'est l'équivalent de &lt;code&gt;across()&lt;/code&gt; pour les fonctions portant sur toute la base et non sur chacune des colonnes. Par exemple, la fonction suivante permet de grouper par des variables du choix de l'utilisateur et de sortir les moyennes de toutes les variables numériques :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_group_by&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_group&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; 
    &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt; &lt;span class="n"&gt;vars_group&lt;/span&gt; &lt;span class="p"&gt;}}))&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; 
    &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;.names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mean_{.col}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;my_group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vars_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cyl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;## `summarise()` has grouped output by &amp;#39;am&amp;#39;. You can override using the `.groups`&lt;/span&gt;
&lt;span class="c1"&gt;## argument.&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 6 × 11&lt;/span&gt;
&lt;span class="c1"&gt;## # Groups:   am [2]&lt;/span&gt;
&lt;span class="c1"&gt;##      am   cyl mean_mpg mean_disp mean_hp mean_drat mean_wt mean_qsec mean_vs&lt;/span&gt;
&lt;span class="c1"&gt;##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;## 1     0     4     22.9     136.     84.7      3.77    2.94      21.0   1    &lt;/span&gt;
&lt;span class="c1"&gt;## 2     0     6     19.1     205.    115.       3.42    3.39      19.2   1    &lt;/span&gt;
&lt;span class="c1"&gt;## 3     0     8     15.0     358.    194.       3.12    4.10      17.1   0    &lt;/span&gt;
&lt;span class="c1"&gt;## 4     1     4     28.1      93.6    81.9      4.18    2.04      18.4   0.875&lt;/span&gt;
&lt;span class="c1"&gt;## 5     1     6     20.6     155     132.       3.81    2.76      16.3   0    &lt;/span&gt;
&lt;span class="c1"&gt;## 6     1     8     15.4     326     300.       3.88    3.37      14.6   0    &lt;/span&gt;
&lt;span class="c1"&gt;## # ℹ 2 more variables: mean_gear &amp;lt;dbl&amp;gt;, mean_carb &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Comme pour &lt;code&gt;across&lt;/code&gt;, vous pouvez aussi utiliser les verbes de la tidyselection : &lt;code&gt;all_of&lt;/code&gt;, &lt;code&gt;any_of&lt;/code&gt;, &lt;code&gt;starts_with&lt;/code&gt;, etc...  &lt;/p&gt;
&lt;p&gt;Enfin, il est possible d'utiliser la syntaxe &lt;code&gt;...&lt;/code&gt;, de la manière suivante :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_group_by&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;...&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; 
    &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; 
    &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;.names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mean_{.col}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;my_group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtcars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cyl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## `summarise()` has grouped output by &amp;#39;am&amp;#39;. You can override using the `.groups`&lt;/span&gt;
&lt;span class="c1"&gt;## argument.&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 3 × 11&lt;/span&gt;
&lt;span class="c1"&gt;## # Groups:   am [1]&lt;/span&gt;
&lt;span class="c1"&gt;##      am   cyl mean_mpg mean_disp mean_hp mean_drat mean_wt mean_qsec mean_vs&lt;/span&gt;
&lt;span class="c1"&gt;##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;## 1     0     4     22.9      136.    84.7      3.77    2.94      21.0       1&lt;/span&gt;
&lt;span class="c1"&gt;## 2     0     6     19.1      205.   115.       3.42    3.39      19.2       1&lt;/span&gt;
&lt;span class="c1"&gt;## 3     0     8     15.0      358.   194.       3.12    4.10      17.1       0&lt;/span&gt;
&lt;span class="c1"&gt;## # ℹ 2 more variables: mean_gear &amp;lt;dbl&amp;gt;, mean_carb &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cette notation a l'avantage d'être très simple et flexible : on peut définir à la place des &lt;code&gt;...&lt;/code&gt; autant de paramètres différents que l'on veut. Mais elle ne permet pas de différencier deux groupes de paramètres différents, si l'on veut par exemple définir d'une part des variables sur lesquels grouper, et d'autre des variables sur lesquels sélectionner.       &lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Le &lt;code&gt;tidyverse&lt;/code&gt;, c'est donc plein d'astuces pour rendre le code très facile à écrire et à lire, mais cela implique quelques étapes supplémentaires quand on veut coder ses propres fonctions. On espère que cet article vous aura aidés à y voir plus clair. Pour creuser le sujet, vous pouvez vous référer à la page &lt;a href="https://dplyr.tidyverse.org/articles/programming.html#user-supplied-data"&gt;Programming with dplyr&lt;/a&gt; sur la documentation officielle de &lt;code&gt;dplyr&lt;/code&gt;. Vous pouvez également consulter, sur le site de &lt;code&gt;rlang&lt;/code&gt;, les pages &lt;a href="https://rlang.r-lib.org/reference/glue-operators.html"&gt;Name injection&lt;/a&gt; et &lt;a href="https://rlang.r-lib.org/reference/topic-data-mask-programming.html"&gt;Data mask programming patterns&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;C'est la fin de cet article! N'hésitez pas à &lt;a href="https://www.statoscop.fr"&gt;visiter notre site&lt;/a&gt; et à nous suivre sur &lt;a href="https://twitter.com/stato_scop"&gt;Twitter&lt;/a&gt; et &lt;a href="https://www.linkedin.com/company/statoscop"&gt;Linkedin&lt;/a&gt;. Pour retrouver l'ensemble du code ayant servi à générer cette note, vous pouvez vous rendre sur le &lt;a href="https://github.com/Statoscop/notebooks-blog"&gt;github de Statoscop&lt;/a&gt;.   &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="R"></category><category term="R"></category><category term="Rstats"></category><category term="tidyverse"></category><category term="dplyr"></category><category term="across"></category></entry><entry><title>Taux standardisés : calcul et interprétation avec R</title><link href="https://blog.statoscop.fr/taux-standardises-calcul-et-interpretation-avec-r.html" rel="alternate"></link><published>2023-05-17T00:00:00+02:00</published><updated>2023-05-17T00:00:00+02:00</updated><author><name>Antoine</name></author><id>tag:blog.statoscop.fr,2023-05-17:/taux-standardises-calcul-et-interpretation-avec-r.html</id><summary type="html">&lt;p&gt;Présentation de la méthode de standardisation directe sur les taux de survie des passagers du Titanic.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table des matières&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#principe-de-la-standardisation-directe"&gt;Principe de la standardisation directe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#analyses-exploratoires-des-donnees"&gt;Analyses exploratoires des données&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#calcul-pas-a-pas-des-taux-standardises-de-survie-au-naufrage-du-titanic"&gt;Calcul pas-à-pas des taux standardisés de survie au naufrage du Titanic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pour-conclure"&gt;Pour conclure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Dans cette note nous présentons la méthode de standardisation directe des taux, qui permet de comparer des fréquences d'évènement entre différentes sous-populations en contrôlant par une ou plusieurs autres variables. Après avoir défini le principe général de standardisation directe, on présente une mise en oeuvre pas-à-pas de la méthode sur une étude de cas à partir des données des passagers du Titanic.  &lt;/p&gt;
&lt;h1 id="principe-de-la-standardisation-directe"&gt;Principe de la standardisation directe&lt;/h1&gt;
&lt;p&gt;Les méthodes de standardisation des taux sont principalement étudiées en épidémiologie. Elles permettent en effet de répondre au problème suivant : comment &lt;strong&gt;comparer des indicateurs épidémiologiques&lt;/strong&gt; entre différents pays ayant leurs spécificités démographiques? &lt;br&gt;
On peut lire par exemple sur le site des &lt;a href="https://donnees.banquemondiale.org"&gt;données de la banque mondiale&lt;/a&gt; que le taux de mortalité en 2020 en Australie est de 6 pour 1000 habitants, contre 12 pour 1000 habitants en Allemagne. Or, cet indicateur est bien sûr fortement influencé par la structure d'âge de la population concernée. Pour correctement comparer cet indicateur entre l'Australie et l'Allemagne et éventuellement en tirer des conclusions sur des différences de qualité de vie entre les deux pays, il faudrait &lt;strong&gt;comparer ces taux à structure d'âge constante&lt;/strong&gt;. &lt;br&gt;
C'est précisément ce que permet de faire la standardisation directe. Il est nécessaire pour cela de disposer du détail de l'indicateur par tranche d'âge dans chacun des pays. Dans notre exemple, une fois qu'on dispose des taux de mortalité par tranche d'âge en Australie et en Allemagne, on les  applique à &lt;strong&gt;une structure d'âge de référence&lt;/strong&gt;, qui peut être soit celle d'un des deux pays, soit celle du monde entier si on dispose de l'information. On peut alors obtenir un nouveau taux de mortalité global &lt;strong&gt;corrigé de l'effet lié à l'âge&lt;/strong&gt; et permettant une comparaison plus pertinente entre les pays. Voyons concrètement comment on peut mettre en oeuvre cette méthode sur une étude de cas en R.  &lt;/p&gt;
&lt;h1 id="analyses-exploratoires-des-donnees"&gt;Analyses exploratoires des données&lt;/h1&gt;
&lt;p&gt;Pour notre petit exemple, on s'appuie sur un dataset très connu : les &lt;a href="https://www.kaggle.com/c/titanic"&gt;données des passagers du Titanic&lt;/a&gt;. Les informations qui nous intéressent ici sont la classe économique, l'âge et le fait d'avoir survécu ou non au naufrage. On ne garde que les observations ayant des valeurs renseignées pour ces 3 variables. On veut répondre à la question suivante : &lt;strong&gt;le fait d'être dans une classe économique aisée augmente-t-elle les chances de survie au nauffrage?&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;La première approche de cette question est bien sûr de calculer les taux de survie par classe économique. le résultat est le suivant :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;titanic_data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx_survie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;survived&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="n"&gt;knitr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;pclass&lt;/th&gt;
&lt;th align="right"&gt;tx_survie&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;0.6373239&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;0.4406130&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="right"&gt;0.2614770&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On constate en effet une forte disparité des taux de survie en fonction de la classe économique, puisque les passagers de 1ere classe sont 63,7% à survivre, contre 44,1% des passagers de seconde classe et 26,1% des passagers de 3e classe.&lt;br&gt;
Est-on bien sûr cependant que l'on observe &lt;strong&gt;l'effet de la classe économique et pas d'un autre facteur de confusion&lt;/strong&gt;? On peut par exemple imaginer que l'âge a un effet important sur la chance de survie, et qu'il est également lié à la classe économique choisie pour le voyage. Vérifions ces hypothèses en croisant la répartition en tranches d'âge dans chaque classe :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;titanic_data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tr_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="c1"&gt;# À ce stade le df n&amp;#39;est plus groupé que par pclass&lt;/span&gt;
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Proportion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eff&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eff&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="n"&gt;knitr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;pclass&lt;/th&gt;
&lt;th align="left"&gt;tr_age&lt;/th&gt;
&lt;th align="right"&gt;Proportion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;0.0528169&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;0.3239437&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;0.3697183&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;0.2535211&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;0.1264368&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;0.5823755&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;0.1954023&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;0.0957854&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;0.2115768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;0.6047904&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;0.1576846&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;0.0259481&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On constate en effet que la classe 3 comporte bien plus de mineurs et bien moins de passagers de plus de cinquante ans que la première classe. Comme on s'y attendait, &lt;strong&gt;plus la classe économique est aisée, plus les passagers ont un âge élevé&lt;/strong&gt;. Voyons maintenant si les taux de survie varient en fonction de l'âge :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;titanic_data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tr_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx_survie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;survived&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="n"&gt;knitr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;tr_age&lt;/th&gt;
&lt;th align="right"&gt;tx_survie&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;0.5259740&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;0.3765996&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;0.4085106&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;0.4000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Les taux de survie ne semblent pas beaucoup varier en fonction de l'âge, à part pour les mineurs qui ont un taux de survie bien supérieur aux autres. Croisons maintenant les taux de survie en fonction de la classe économique &lt;strong&gt;et&lt;/strong&gt; de la tranche d'âge :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;titanic_data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tr_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx_survie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;survived&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="n"&gt;knitr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;pclass&lt;/th&gt;
&lt;th align="left"&gt;tr_age&lt;/th&gt;
&lt;th align="right"&gt;tx_survie&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;0.8666667&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;0.7065217&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;0.6285714&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;0.5138889&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;0.8787879&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;0.4144737&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;0.3333333&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;0.2400000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;0.3679245&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;0.2574257&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;0.1645570&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;0.0769231&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On constate là plusieurs choses :&lt;br&gt;
- Au sein de chaque classe économique il y a un lien très clair entre l'âge et le taux de survie : plus on vieillit pluys celui-ci baisse.&lt;br&gt;
- Au sein de chaque tranche d'âge, plus la classe économique est élevée plus la chance de survie augmente. La seule exception est la tranche d'âge 0 - 17 ans de la seconde classe qui a un taux de survie légèrement supérieur à la population du même âge de la 1ere classe (87,9% contre 86,7%).  &lt;/p&gt;
&lt;p&gt;Au vu de ces éléments il apparaît légitime de calculer des taux standardisés pour comparer des fréquences de survie au sein de chaque classe corrigées de l'effet de l'âge.  &lt;/p&gt;
&lt;h1 id="calcul-pas-a-pas-des-taux-standardises-de-survie-au-naufrage-du-titanic"&gt;Calcul pas-à-pas des taux standardisés de survie au naufrage du Titanic&lt;/h1&gt;
&lt;p&gt;Au vu des résultats des taux de survie croisés par classe et âge, on sait déjà que la classe économique et l'âge jouent sur la chance de survie. Le calcul des taux standardisés de survie va permettre de quantifier &lt;strong&gt;l'effet de la classe économique isolé de l'effet âge&lt;/strong&gt;. Le principe est le suivant : on calcule le taux de survie que l'on observerait dans chaque classe économique &lt;strong&gt;si la répartition des passagers en classe d'âge était la même que celle de la population de référence&lt;/strong&gt;. Dans notre exemple, la population de référence est l'ensemble des passagers.&lt;/p&gt;
&lt;p&gt;La première étape est de récupérer les effectifs de classe d'âge de la population de référence :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;titanic_data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tr_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rep_age_ref&lt;/span&gt;

&lt;span class="n"&gt;knitr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rep_age_ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;tr_age&lt;/th&gt;
&lt;th align="right"&gt;eff&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;154&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;547&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;110&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On calcule ensuite comme précédemment les taux de survie par tranche d'âge de chaque classe économique et on transforme la table pour avoir une colonne par classe économique.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;titanic_data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tr_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="c1"&gt;# taux de survie par classe et tranche d&amp;#39;âge&lt;/span&gt;
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;survie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;survived&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="c1"&gt;# on transforme la table en largeur pour avoir trois colonnes&lt;/span&gt;
  &lt;span class="c1"&gt;# donnant le taux de survie&lt;/span&gt;
  &lt;span class="n"&gt;tidyr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;pivot_wider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;survie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="c1"&gt;# option names_glue pour spécifier le nom des variables créées&lt;/span&gt;
                     &lt;span class="n"&gt;names_glue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{.value}_{pclass}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;survie_age_class&lt;/span&gt;

&lt;span class="n"&gt;knitr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;survie_age_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;tr_age&lt;/th&gt;
&lt;th align="right"&gt;survie_1&lt;/th&gt;
&lt;th align="right"&gt;survie_2&lt;/th&gt;
&lt;th align="right"&gt;survie_3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;0.8666667&lt;/td&gt;
&lt;td align="right"&gt;0.8787879&lt;/td&gt;
&lt;td align="right"&gt;0.3679245&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;0.7065217&lt;/td&gt;
&lt;td align="right"&gt;0.4144737&lt;/td&gt;
&lt;td align="right"&gt;0.2574257&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;0.6285714&lt;/td&gt;
&lt;td align="right"&gt;0.3333333&lt;/td&gt;
&lt;td align="right"&gt;0.1645570&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;0.5138889&lt;/td&gt;
&lt;td align="right"&gt;0.2400000&lt;/td&gt;
&lt;td align="right"&gt;0.0769231&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Il ne reste plus qu'à fusionner les deux tables ainsi créées et à appliquer chacun des taux de survie aux effectifs par tranche d'âge de la population de référence :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rep_age_ref&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;inner_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;survie_age_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr_age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;survie_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;.&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;eff&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eff_survie_age_class&lt;/span&gt;
&lt;span class="n"&gt;knitr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eff_survie_age_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;tr_age&lt;/th&gt;
&lt;th align="right"&gt;eff&lt;/th&gt;
&lt;th align="right"&gt;survie_1&lt;/th&gt;
&lt;th align="right"&gt;survie_2&lt;/th&gt;
&lt;th align="right"&gt;survie_3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0 - 17 ans&lt;/td&gt;
&lt;td align="right"&gt;154&lt;/td&gt;
&lt;td align="right"&gt;133.46667&lt;/td&gt;
&lt;td align="right"&gt;135.33333&lt;/td&gt;
&lt;td align="right"&gt;56.660377&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;18 - 34 ans&lt;/td&gt;
&lt;td align="right"&gt;547&lt;/td&gt;
&lt;td align="right"&gt;386.46739&lt;/td&gt;
&lt;td align="right"&gt;226.71711&lt;/td&gt;
&lt;td align="right"&gt;140.811881&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;35 - 49 ans&lt;/td&gt;
&lt;td align="right"&gt;235&lt;/td&gt;
&lt;td align="right"&gt;147.71429&lt;/td&gt;
&lt;td align="right"&gt;78.33333&lt;/td&gt;
&lt;td align="right"&gt;38.670886&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;50 ans ou +&lt;/td&gt;
&lt;td align="right"&gt;110&lt;/td&gt;
&lt;td align="right"&gt;56.52778&lt;/td&gt;
&lt;td align="right"&gt;26.40000&lt;/td&gt;
&lt;td align="right"&gt;8.461538&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Si l'utilisation d'across ne vous semble pas claire, je ne saurais trop vous recommander &lt;a href="https://blog.statoscop.fr/fonctionnement-et-performances-dacross-dans-dplyr.html"&gt;notre précédent article de blog&lt;/a&gt; sur ce verbe bien pratique de dplyr.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On obtient finalement nos taux de survie standardisés en sommant les effectifs par tranche d'âge et en divisant par l'effectif total :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;eff_survie_age_class&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;survie_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eff&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="n"&gt;knitr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;survie_1&lt;/th&gt;
&lt;th align="right"&gt;survie_2&lt;/th&gt;
&lt;th align="right"&gt;survie_3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;0.692329&lt;/td&gt;
&lt;td align="right"&gt;0.446256&lt;/td&gt;
&lt;td align="right"&gt;0.2338477&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Par rapport aux taux de survie bruts présentés plus haut, on constate que &lt;strong&gt;les inégalités économiques de survie s'aggravent après avoir contrôlé par l'âge&lt;/strong&gt;. Le taux de survie standardisés de la classe 1 et de la classe 3 sont en effet de 69,2% et 23,4 % contre 63,7% et 26,1% avant la correction. Cela correspond à ce que l'on pouvait pressentir après l'analyse exploratoire puisque les passagers de la classe 3 sont plus jeunes et que les jeunes ont une meilleure chance de survie au sein de chaque classe économique.   &lt;/p&gt;
&lt;h1 id="pour-conclure"&gt;Pour conclure&lt;/h1&gt;
&lt;p&gt;J'espère que cet exemple vous aura permis de mieux appréhender la question de la standardisation directe. Bien sûr, la méthode utilisée ici comporte des limites, notamment l'utilisation de tranches d'âge très larges qui pourraient fausser le résultat. On peut par exemple penser que les enfants en bas âge ont bénéficié d'une attention toute particulière, et ils se retrouvent ici dans la même tranche d'âge que des adolescents. Mais nous sommes également contraints par les effectifs qui nous empêchent de faire une analyse trop fine de ces subtilités. Si ces questions vous intéressent, vous pouvez vous reporter à notre article sur &lt;a href="https://blog.statoscop.fr/le-dilemme-biais-variance-dans-la-modelisation-de-donnees.html"&gt;le dilemme biais-variance&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;Enfin, nous avons passé sous silence une variable explicative très importante : le sexe des passagers. Les taux de survie sont en effet très différents pour les hommes et pour les femmes. Il est possible de reproduire cette analyse en prenant en compte cette variable, croisée également avec l'âge. Cependant, toujours en raison de trop faibles effectifs, il sera sans doute nécessaire d'agréger encore plus les tranches d'âge. Vous avez les cartes en main pour le faire, et mieux comprendre les fortunes diverses de Jack et Rose dans le célèbre film de la tragédie...  &lt;/p&gt;
&lt;p&gt;C'est la fin de cet article! N'hésitez pas à &lt;a href="https://www.statoscop.fr"&gt;visiter notre site&lt;/a&gt; et à nous suivre sur &lt;a href="https://twitter.com/stato_scop"&gt;Twitter&lt;/a&gt; et &lt;a href="https://www.linkedin.com/company/statoscop"&gt;Linkedin&lt;/a&gt;. Pour retrouver l'ensemble du code ayant servi à générer cette note, vous pouvez vous rendre sur le &lt;a href="https://github.com/Statoscop/notebooks-blog"&gt;github de Statoscop&lt;/a&gt;.  &lt;/p&gt;</content><category term="R"></category><category term="R"></category><category term="Rstats"></category><category term="data science"></category><category term="statistiques"></category></entry><entry><title>Migration de SAS vers R</title><link href="https://blog.statoscop.fr/migration-de-sas-vers-r.html" rel="alternate"></link><published>2022-11-08T00:00:00+01:00</published><updated>2022-11-08T00:00:00+01:00</updated><author><name>Antoine</name></author><id>tag:blog.statoscop.fr,2022-11-08:/migration-de-sas-vers-r.html</id><summary type="html">&lt;p&gt;Quelques conseils pour réussir sa transition de SAS vers R&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table des matières&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#options-de-recodage-en-r"&gt;Options de recodage en R&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#base-r"&gt;Base R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tidyverse"&gt;Tidyverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#datatable"&gt;data.table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notre-conseil"&gt;Notre conseil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#organisation-du-travail-de-recodage-en-r"&gt;Organisation du travail de recodage en R&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#les-projets-rstudio"&gt;Les projets RStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#renv-pour-gerer-les-packages"&gt;Renv pour gérer les packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-ou-un-autre-logiciel-de-gestion-de-versions"&gt;Git ou un autre logiciel de gestion de versions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#accompagnement-de-la-migration-de-sas-vers-r"&gt;Accompagnement de la migration de SAS vers R&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#en-interne"&gt;En interne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avec-un-prestataire"&gt;Avec un prestataire&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;L'utilisation du logiciel d'analyses statistiques SAS est encore assez ancrée dans certaines administrations publiques et grandes entreprises, malgré la concurrence de deux logiciels open-source offrant des performances souvent supérieures : R et Python. La &lt;strong&gt;migration vers un nouveau langage&lt;/strong&gt; présente un certain nombre de difficultés, mais le jeu en vaut la chandelle! Nous proposons dans cet article quelques recommandations pour recoder ses scripts SAS en R et assurer une &lt;strong&gt;transition vers l'open-source&lt;/strong&gt; la plus simple possible.  &lt;/p&gt;
&lt;h1 id="options-de-recodage-en-r"&gt;Options de recodage en R&lt;/h1&gt;
&lt;p&gt;Une des difficultés de R est aussi une de ses forces : le grand nombre de possibilités qui s'offrent à vous pour coder. Le CRAN (pour &lt;em&gt;Comprehensive R Archive Network&lt;/em&gt;) comprend un nombre impressionnant de packages (+ de 18000!). Dans ces conditions, il est important de se mettre d'accord a minima sur l'orientation que vous souhaitez prendre, afin d'assurer une certaine homogénéité entre les différents membres de vos équipes. Ces &lt;em&gt;règles&lt;/em&gt; peuvent bien sûr varier d'une équipe à l'autre, en fonction de ses besoins spécifiques. On présente ici trois des options les plus couramment utilisées en statistiques : base R, le tidyverse et data.table. On ne rentre pas dans le détail de la syntaxe de chacune de ces options mais vous pouvez approfondir cet aspect en lisant notre &lt;a href="https://blog.statoscop.fr/comparaisons-base-dplyr-datatable.html"&gt;article qui compare les performances de ces trois options&lt;/a&gt;.  &lt;/p&gt;
&lt;h2 id="base-r"&gt;Base R&lt;/h2&gt;
&lt;p&gt;Base R désigne toutes les fonctions natives de R, qui sont chargées par défaut au lancement du logiciel. Pour l'analyse de données, on s'appuiera notamment sur le format &lt;code&gt;data.frame&lt;/code&gt;. L'utilisation exclusive de base R aurait l'avantage de ne pas faire dépendre votre code d'autres packages et donc de lui assurer une certaine stabilité. Cependant, pour l'analyse de données, la syntaxe sera vite verbeuse et peu lisible pour des non initiés. De plus, pour des traitements de données plus complexes, vous ne trouverez pas forcément ce qu'il vous faut dans ce que propose base R. Enfin, cette option est souvent &lt;a href="https://blog.statoscop.fr/comparaisons-base-dplyr-datatable.html"&gt;bien moins performante&lt;/a&gt; en termes de vitesse d'exécution que les deux que nous vous présentons ensuite.  &lt;/p&gt;
&lt;h2 id="tidyverse"&gt;Tidyverse&lt;/h2&gt;
&lt;p&gt;Le tidyverse est un &lt;a href="https://www.tidyverse.org/"&gt;ensemble de packages&lt;/a&gt; destinés au traitement de données, du nettoyage à l'analyse et la datavisualisation. En particulier, le package &lt;code&gt;dplyr&lt;/code&gt; propose des fonctions de haut niveau couvrant la très grande majorité des besoins lors de la manipulation des données. Ces fonctions, chaînées avec l'opérateur &lt;em&gt;pipe&lt;/em&gt; (&lt;code&gt;%&amp;gt;%&lt;/code&gt; du package &lt;code&gt;magritr&lt;/code&gt; ou &lt;code&gt;|&amp;gt;&lt;/code&gt; de base R depuis la version 4.1.0), offrent un &lt;strong&gt;code très lisible et intuitif&lt;/strong&gt; à écrire. Enfin, elles sont optimisées et offrent de &lt;a href="https://blog.statoscop.fr/comparaisons-base-dplyr-datatable.html"&gt;bonnes performances&lt;/a&gt;. L'inconvénient du tidyverse est sans doute qu'il concerne beaucoup de packages qui ont chacun également un certain nombre de dépendances à d'autres packages. Cependant, le fait qu'il soit maintenu par les équipes de RStudio (la société s'appelle &lt;a href="https://posit.co/"&gt;Posit&lt;/a&gt; depuis peu) est de nature à rassurer sur la stabilité de cette solution. En général on ne recommande de toute façon pas de charger l'ensemble du tidyverse mais seulement les packages que vous utilisez.  &lt;/p&gt;
&lt;h2 id="datatable"&gt;data.table&lt;/h2&gt;
&lt;p&gt;Des trois options, &lt;code&gt;data.table&lt;/code&gt; est &lt;a href="https://blog.statoscop.fr/comparaisons-base-dplyr-datatable.html"&gt;la plus performante&lt;/a&gt;. Ce package utilise un format concurrent du &lt;code&gt;data.frame&lt;/code&gt; de base R, le &lt;code&gt;data.table&lt;/code&gt;, qui optimise la vitesse d'exécution des instructions. Ce package a aussi l'avantage de ne dépendre d'aucun autre package. En contrepartie, il offre une syntaxe sans doute moins lisible pour les non-initiés, en particulier pour des opérations plus complexes.  &lt;/p&gt;
&lt;h2 id="notre-conseil"&gt;Notre conseil&lt;/h2&gt;
&lt;p&gt;Dans la majorité des cas, le &lt;code&gt;tidyverse&lt;/code&gt; et en particulier &lt;strong&gt;&lt;code&gt;dplyr&lt;/code&gt; sera le choix le plus adapté&lt;/strong&gt;. Pour des utilisateurs de SAS, en particulier pour ceux connaissant un peu de SQL, les fonctions à utiliser seront plus intuitives. Cette option bénéficie en outre d'une communauté d'utilisateurs très importante permettant de trouver facilement des réponses en ligne aux problèmes que vous pourrez rencontrer. De plus, la vitesse d'exécution sera souvent au moins aussi bonne que celle de SAS. Si l'activité concernée par le recodage a un gros enjeu de temps d'exécution et moins de lisibilité du code, c'est sans doute vers &lt;code&gt;data.table&lt;/code&gt; qu'il sera intéressant de se tourner. Il peut aussi être possible de choisir le meilleur des deux mondes avec le package &lt;a href="https://dtplyr.tidyverse.org/"&gt;dtplyr&lt;/a&gt;, combinant la syntaxe de dplyr aux fonctions de data.table. Enfin, il va de soi qu'une certaine souplesse est de mise pour pouvoir utiliser les fonctions de base R quand elles n'ont pas d'équivalent dans l'écosystème choisi, ainsi que d'autres packages pour des besoins spécifiques.  &lt;/p&gt;
&lt;h1 id="organisation-du-travail-de-recodage-en-r"&gt;Organisation du travail de recodage en R&lt;/h1&gt;
&lt;p&gt;Une fois que vous avez choisi comment vous souhaitez coder en R, vous pouvez spécifier vos recommandations dans un document &lt;strong&gt;listant les bonnes pratiques&lt;/strong&gt; de codage en R. Cela pourra servir à encadrer et accompagner le travail des développeurs R et uniformiser autant que possible les différentes manières de coder. En plus de cela, nous recommandons quelques outils simples à adopter pour tirer le meilleur de l'éco-système R.    &lt;/p&gt;
&lt;h2 id="les-projets-rstudio"&gt;Les projets RStudio&lt;/h2&gt;
&lt;p&gt;Les &lt;a href="https://support.rstudio.com/hc/en-us/articles/200526207-Using-RStudio-Projects"&gt;projets RStudio&lt;/a&gt; sont des fichiers associés à un dossier de travail que vous aurez créés. Ils permettent de spécifier les chemins vers vos données ou vers le dossier des sorties que vous voulez créer de manière &lt;strong&gt;relative à ce dossier parent&lt;/strong&gt;. Leur utilisation permet de bannir de vos scripts l'utilisation de chemins spécifiques à votre machine. Ainsi, on remplacera avantageusement l'appel du chemin &lt;code&gt;C://Users/antoine/Documents/Mon_projet/data/ma_base.csv&lt;/code&gt; par &lt;code&gt;data/ma_base.csv&lt;/code&gt; dans les scripts.  C'est donc &lt;strong&gt;un premier pas&lt;/strong&gt; vers la création d'un dossier de travail contenant des scripts réutilisables en l'état par vos collègues, que ce soit ceux qui travaillent dans votre équipe ou ceux qui vous succéderont.  &lt;/p&gt;
&lt;h2 id="renv-pour-gerer-les-packages"&gt;Renv pour gérer les packages&lt;/h2&gt;
&lt;p&gt;Renv est un gestionnaire de packages R, dont nous parlons déjà dans &lt;a href="https://blog.statoscop.fr/gestion-des-packages-sur-r-avec-renv.html"&gt;cet article&lt;/a&gt;. Il vous permet de choisir un &lt;strong&gt;environnement stable de packages&lt;/strong&gt; sur un projet donné. En particulier, il vous assure à un moment T que toute une équipe sur un même projet travaille bien avec les mêmes packages et les mêmes versions de ceux-ci. Il vous permet aussi de pouvoir refaire tourner un code avec le même système de packages qu'au moment où il a été créé. C'est donc un autre élément essentiel de la reproductibilité et de la stabilité de vos projets, en particulier si on l'utilise avec un logiciel de gestion de versions...  &lt;/p&gt;
&lt;h2 id="git-ou-un-autre-logiciel-de-gestion-de-versions"&gt;Git ou un autre logiciel de gestion de versions&lt;/h2&gt;
&lt;p&gt;Même si ça n'est pas spécifique à R, il est important de profiter de cette migration pour adopter l'utilisation d'un logiciel de gestion de versions si cela n'est pas déjà fait. &lt;a href="https://githowto.com/"&gt;Git&lt;/a&gt; est sans doute le plus utilisé aujourd'hui. Il permet de tracer les modifications de votre code pas-à-pas, de revenir à une version antérieure de votre projet sans difficultés, de partager en temps réel avec votre équipe les modifications du code, de gérer aussi simplement que possible des modifications simultanées sur un même projet, et bien d'autres choses encore... La prise en main de Git peut prendre un peu de temps car cela n'est pas forcément intuitif pour qui n'est pas habitué à la gestion de versions mais c'est sans aucun doute absolument nécessaire pour assurer une bonne gestion de vos projets.    &lt;/p&gt;
&lt;h1 id="accompagnement-de-la-migration-de-sas-vers-r"&gt;Accompagnement de la migration de SAS vers R&lt;/h1&gt;
&lt;p&gt;Enfin, un aspect important de la migration vers un nouveau langage est la &lt;strong&gt;gestion de la transition&lt;/strong&gt; entre les deux. Que celle-ci soit prise en main en interne ou par un prestataire, il est indispensable de former les équipes en place et de libérer du temps de travail pour accompagner cette transition.  &lt;/p&gt;
&lt;h2 id="en-interne"&gt;En interne&lt;/h2&gt;
&lt;p&gt;L'avantage de gérer la migration vers R en interne est qu'elle associe forcément à ce processus les équipes en place. L'inconvénient évident est qu'il est alors indispensable de libérer beaucoup de temps du travail effectif à consacrer à cette tâche. Il est très important en amont de se mettre d'accord sur les points évoqués plus haut afin d'établir une sorte de &lt;em&gt;charte&lt;/em&gt; du code qui assurera un minimum de cohérence au sein des équipes. Enfin, il est évidemment indispensable d'accompagner chacun des membres des équipes en fonction de leur familiarité avec le nouveau langage. L'idéal est de proposer des &lt;strong&gt;formations sur mesure&lt;/strong&gt; correspondant aux problématiques métier de chacun.  &lt;/p&gt;
&lt;h2 id="avec-un-prestataire"&gt;Avec un prestataire&lt;/h2&gt;
&lt;p&gt;Si vous faites appel à un prestataire, cela ne signifie pas pour autant que vous ne devrez pas libérer du temps de vos équipes pour la migration. On recommande en effet des échanges étroits et réguliers avec le prestataire, et plusieurs livraisons à intervalles réguliers plutôt qu'une seule à la fin du travail. Ceci doit permettre de s'assurer d'une part que le prestataire ne va pas dans une mauvaise direction et d'autre part que le code apparaît lisible et compréhensible pour les chargés d'étude. C'est aussi l'occasion pour ces derniers de se former et d'échanger avec le prestataire sur ces choix lors du recodage. Il est aussi possible de faire appel à un prestataire simplement pour encadrer votre équipe dans le travail de recodage, optimiser le code à certains points bloquants, faire un audit du travail réalisé...&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Quitter SAS et aller vers R, ou un autre logiciel, c'est donc du travail et cela nécessite d'investir du temps et des moyens. Mais c'est aussi se libérer d'une &lt;strong&gt;licence beaucoup trop chère&lt;/strong&gt;, et s'ouvrir les portes de nouvelles possibilités. Pourquoi ne pas en profiter pour &lt;strong&gt;automatiser vos rapports&lt;/strong&gt; et vos publications avec &lt;a href="https://rmarkdown.rstudio.com/"&gt;R Markdown&lt;/a&gt;? Et si vous vous lanciez dans le développement d'une petite &lt;a href="https://shiny.rstudio.com/gallery/"&gt;application interactive R Shiny&lt;/a&gt; pour mettre en valeur vos résultats les plus marquants? &lt;br&gt;
Quoiqu'il en soit, si cet article vous a donné envie d'aller plus loin, vous pouvez &lt;a href="https://www.statoscop.fr/contact"&gt;nous contacter sur le site de Statoscop&lt;/a&gt; pour discuter des prochaines étapes!  &lt;/p&gt;</content><category term="R"></category><category term="R"></category><category term="SAS"></category><category term="recodage"></category><category term="migration"></category><category term="codes"></category><category term="scripts"></category></entry><entry><title>Ggplot2 : mise en forme d'un barplot</title><link href="https://blog.statoscop.fr/ggplot2-mise-en-forme-dun-barplot.html" rel="alternate"></link><published>2022-08-22T00:00:00+02:00</published><updated>2022-08-22T00:00:00+02:00</updated><author><name>Antoine</name></author><id>tag:blog.statoscop.fr,2022-08-22:/ggplot2-mise-en-forme-dun-barplot.html</id><summary type="html">&lt;p&gt;Réalisation et mise en forme d'un graphique en colonnes avec ggplot2.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table des matières&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#creer-notre-premier-graphique-avec-geom_col"&gt;Créer notre premier graphique avec geom_col&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mettre-en-forme-le-graphique"&gt;Mettre en forme le graphique&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ordonner-laffichage-en-fonction-de-la-valeur-de-la-variable-dinteret"&gt;Ordonner l'affichage en fonction de la valeur de la variable d'intérêt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mise-en-forme-des-axes"&gt;Mise en forme des axes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utilisation-dun-theme"&gt;Utilisation d'un thème&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Dans cette note nous proposons un petit cas pratique pour illustrer la mise en forme d'un graphique en colonnes, ou barplot, avec le package R &lt;code&gt;ggplot2&lt;/code&gt;. On s'appuie pour cela sur les données de la &lt;a href="https://www.gapminder.org/"&gt;fondation Gapminder&lt;/a&gt; en s'intéressant à la part des dépenses de santé financées par l'Etat dans les 30 pays les plus peuplés au monde.  &lt;/p&gt;
&lt;h1 id="creer-notre-premier-graphique-avec-geom_col"&gt;Créer notre premier graphique avec geom_col&lt;/h1&gt;
&lt;p&gt;Notre objectif dans cet exemple est d'afficher le taux de dépenses de santé financées par l'État pour chaque pays présent dans la base. Ce barplot se réalise avec &lt;code&gt;ggplot2&lt;/code&gt; à l'aide de &lt;code&gt;geom_col&lt;/code&gt;. En effet, nous voulons représenter la valeur d'une variable (ce taux de dépenses) pour chaque modalité donnée d'une variable catégorielle (le pays). Si nous avions voulu représenter le nombre de fois où une variable catégorielle apparaît dans la base, nous aurions utilisé &lt;code&gt;geom_bar&lt;/code&gt;.&lt;br&gt;
Avec ces éléments, le premier graphique qui nous viendrait à l'esprit en utilisant &lt;code&gt;ggplot2&lt;/code&gt; serait le suivant :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df_health&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gvt_health_exp_10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;geom_col&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Pelican" src="../images/geom_col_files/figure-html/unnamed-chunk-1-1.png"&gt;  &lt;/p&gt;
&lt;p&gt;Il est bien sûr illisible, en raison notamment du grand nombre de pays représenté et du fait que leurs noms ne peuvent pas s'afficher correctement sur l'axe des abscisses. On peut corriger ça en faisant une rotation de l'étiquette des axes de 90° avec &lt;code&gt;theme(axis.text.x = element_text(angle = 90))&lt;/code&gt;. Les barres sont également trop rapprochées, ce que l'on va corriger avec le paramètre &lt;code&gt;width&lt;/code&gt; de &lt;code&gt;geom_col&lt;/code&gt;. On obtient avec ces réglages rapides le graphique suivant :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df_health&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gvt_health_exp_10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;geom_col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis.text.x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;element_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Pelican" src="../images/geom_col_files/figure-html/unnamed-chunk-2-1.png"&gt;  &lt;/p&gt;
&lt;p&gt;C'est déjà mieux! Mais il reste un peu de travail pour faciliter la lecture de ce graphique.  &lt;/p&gt;
&lt;h1 id="mettre-en-forme-le-graphique"&gt;Mettre en forme le graphique&lt;/h1&gt;
&lt;p&gt;Pour rendre ce graphique plus agréable à lire et plus compréhensible, on propose d'ordonner l'affichage en fonction de la valeur du résultat, de mettre en forme et d'inverser les axes et enfin de changer quelques éléments graphiques. &lt;/p&gt;
&lt;h2 id="ordonner-laffichage-en-fonction-de-la-valeur-de-la-variable-dinteret"&gt;Ordonner l'affichage en fonction de la valeur de la variable d'intérêt&lt;/h2&gt;
&lt;p&gt;Un élément important de ce graphique est que les pays sont présentés dans l'ordre alphabétique, ce qui n'a pas d'intérêt pour le lecteur. On peut facilement changer l'ordre d'affichage des modalités de l'axe des abscisses en le conditionnant aux valeurs de l'axe des ordonnées. On utilise pour cela dans l'instruction &lt;code&gt;aes()&lt;/code&gt; la fonction &lt;code&gt;reorder()&lt;/code&gt; au moment de la définition du &lt;code&gt;x&lt;/code&gt;, qui nous permet de l'ordonner de manière croissante ou décroissante en fonction de notre variable d'intérêt :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# par ordre croissant &lt;/span&gt;
&lt;span class="n"&gt;df_health&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;reorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gvt_health_exp_10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gvt_health_exp_10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;geom_col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis.text.x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;element_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  

&lt;span class="c1"&gt;# par ordre décroissant&lt;/span&gt;
&lt;span class="n"&gt;df_health&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;reorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gvt_health_exp_10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gvt_health_exp_10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;geom_col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis.text.x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;element_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Pelican" src="../images/geom_col_files/figure-html/order_desc_asc.png"&gt;  &lt;/p&gt;
&lt;p&gt;Il est maintenant bien  plus facile de situer chaque pays par rapport aux autres.  &lt;/p&gt;
&lt;h2 id="mise-en-forme-des-axes"&gt;Mise en forme des axes&lt;/h2&gt;
&lt;p&gt;Avec l'instruction &lt;code&gt;labs&lt;/code&gt;, on définit tout d'abord les titres de nos axes ainsi que le titre général du graphique. Puis, dans &lt;code&gt;scale_y_continuous&lt;/code&gt;, on met en forme l'axe représentant les parts de dépenses de santé :&lt;br&gt;
- avec le paramètre &lt;code&gt;labels&lt;/code&gt; on fait apparaître les étiquettes sous forme de pourcentage grâce à la fonction &lt;code&gt;scales::percent()&lt;/code&gt;.&lt;br&gt;
- avec le paramètre &lt;code&gt;limits&lt;/code&gt; on fait en sorte que les pourcentages affichés aillent jusqu'à 1, de manière à ce que le lecteur ait une représentation plus juste de ce que serait la part de dépenses restantes financées par les patients ou des organismes d'assurance privés.&lt;br&gt;
- le paramètre &lt;code&gt;expand = c(0, 0)&lt;/code&gt; permet de supprimer les espaces avant et après les valeurs minimum et maximum de notre variable d'intérêt.&lt;br&gt;
Pour mieux lire les noms des pays, on intervertit l'axe des ordonnées et des abscisses avec l'instruction &lt;code&gt;coord_flip()&lt;/code&gt; pour avoir un graphique en barres horizontales. Enfin, on règle la taille des labels des éléments de x et de y.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df_health&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;reorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gvt_health_exp_10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gvt_health_exp_10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;geom_col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="nf"&gt;labs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Pays&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;y&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Part de dépenses de santé&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Part des dépenses de santé financées par l&amp;#39;Etat\n dans les 30 pays les plus peuplés&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;scale_y_continuous&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;scales&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accuracy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="n"&gt;limits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;coord_flip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plot_health&lt;/span&gt;

&lt;span class="n"&gt;plot_health&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis.text.x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;element_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;axis.text.y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;element_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Pelican" src="../images/geom_col_files/figure-html/unnamed-chunk-4-1.png"&gt;  &lt;/p&gt;
&lt;h2 id="utilisation-dun-theme"&gt;Utilisation d'un thème&lt;/h2&gt;
&lt;p&gt;Pour l'affichage graphique il est possible de régler chaque élément du graphique comme on le souhaite. Le plus facile reste cependant d'utiliser les nombreux thèmes existants disponibles, par défaut dans &lt;code&gt;ggplot2&lt;/code&gt; ou en installant d'autres packages, comme &lt;code&gt;ggthemes&lt;/code&gt;. Pour les utiliser il suffit d'ajouter l'instruction &lt;code&gt;+ theme_*()&lt;/code&gt; à la suite de votre plot. Le thème par défaut dans ggplot2 est &lt;code&gt;theme_gray&lt;/code&gt;. On vous présente le résultat donné par &lt;code&gt;theme_economist&lt;/code&gt;, disponible dans la librairie &lt;code&gt;ggthemes&lt;/code&gt;, qui reprend la charte graphique du magazine &lt;em&gt;The Economist&lt;/em&gt;. On ajuste également la taille des labels à ce nouveau thème.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ggthemes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plot_health&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;theme_economist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  &lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis.text.x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;element_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;axis.text.y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;element_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Pelican" src="../images/geom_col_files/figure-html/unnamed-chunk-5-1.png"&gt;  &lt;/p&gt;
&lt;p&gt;C'est la fin de cet article! N'hésitez pas à &lt;a href="https://www.statoscop.fr"&gt;visiter notre site&lt;/a&gt; et à nous suivre sur &lt;a href="https://twitter.com/stato_scop"&gt;Twitter&lt;/a&gt; et &lt;a href="https://www.linkedin.com/company/statoscop"&gt;Linkedin&lt;/a&gt;. Pour retrouver l'ensemble du code ayant servi à générer cette note, vous pouvez vous rendre sur le &lt;a href="https://github.com/Statoscop/notebooks-blog"&gt;github de Statoscop&lt;/a&gt;.  &lt;/p&gt;</content><category term="R"></category><category term="R"></category><category term="ggplot2"></category><category term="dataviz"></category><category term="graphiques"></category><category term="barplot"></category></entry><entry><title>Le dilemme biais variance dans la modélisation de données</title><link href="https://blog.statoscop.fr/le-dilemme-biais-variance-dans-la-modelisation-de-donnees.html" rel="alternate"></link><published>2021-11-08T00:00:00+01:00</published><updated>2021-11-08T00:00:00+01:00</updated><author><name>Antoine</name></author><id>tag:blog.statoscop.fr,2021-11-08:/le-dilemme-biais-variance-dans-la-modelisation-de-donnees.html</id><summary type="html">&lt;p&gt;Présentation des enjeux théoriques et pratiques de l'arbitrage biais variance dans la construction d'un modèle de prédiction.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table des matières&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#que-sont-le-biais-et-la-variance"&gt;Que sont le biais et la variance?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enjeux-de-larbitrage-biais-variance"&gt;Enjeux de l'arbitrage biais variance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#liens-avec-loverfitting-et-lunderfitting-dans-les-modeles-de-machine-learning"&gt;Liens avec l'overfitting et l'underfitting dans les modèles de Machine Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#appelons-un-chat-un-chat"&gt;Appelons un chat un chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#courbe-dapprentissage-dun-modele"&gt;Courbe d'apprentissage d'un modèle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;L'arbitrage biais variance est souvent évoqué pour caractériser les enjeux de la construction d'un modèle de prédiction performant. L'idée de cet article est d'essayer de donner au lecteur les outils théoriques de cette question en essayant de privilégier une approche intuitive et pratique du problème. Après avoir défini ce que sont le biais et la variance, on présente les enjeux de cet arbitrage puis l'application concrète dans le cas de l'entraînement d'un modèle de Machine Learning.&lt;/p&gt;
&lt;h1 id="que-sont-le-biais-et-la-variance"&gt;Que sont le biais et la variance?&lt;/h1&gt;
&lt;p&gt;Pour expliquer le plus simplement possible ces concepts, on se place dans le contexte de l'observation de deux variables &lt;code&gt;Y&lt;/code&gt; et &lt;code&gt;X&lt;/code&gt;. Dans le cas d'une modélisation d'une relation entre &lt;code&gt;X&lt;/code&gt; et &lt;code&gt;Y&lt;/code&gt;, le biais d'un estimateur est son écart avec sa "vraie" valeur si on observait parfaitement la relation entre ces variables. On entend donc le biais comme &lt;strong&gt;l'écart entre la fonction modélisée et la fonction théorique&lt;/strong&gt; qui permettrait de restituer le lien entre &lt;code&gt;X&lt;/code&gt; et &lt;code&gt;Y&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Une manière de jouer sur le biais d'un modèle c'est de modifier sa variance. La variance est une mesure de dispersion de valeurs, qui donne une estimation de l'écart de celles-ci à leur moyenne. La variance d'un modèle estime &lt;strong&gt;à quel point celui-ci fluctue autour de sa moyenne pour coller aux données&lt;/strong&gt;. Une mesure utilisée couramment dans le cas des régressions linéaires est le coefficient de détermination R2. Celui-ci calcule &lt;strong&gt;la part de la variance des données expliquée par la variance du modèle&lt;/strong&gt;. Autrement dit, plus mon modèle sera proche des points de mes données, plus sa variance et donc le R2 seront élevés. Pour illustrer ce concept, on présente plusieurs modèles appliqués au même jeu de données avec une variance plus ou moins élevée :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/biais_variance/unnamed-chunk-1-1.png"&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Pour chaque modèle, la courbe du modèle est celle qui apparaît en rouge et on a mis en évidence en vert la projection de chaque point sur sa valeur prédite par le modèle. Voyons comment interpréter ces graphiques :  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Le premier modèle est un modèle naïf qui se contente de prédire que pour chaque valeur de &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt; sera égale à sa moyenne. Par définition donc, sa variance est nulle et sa capacité prédictive faible.  &lt;/li&gt;
&lt;li&gt;Le second modèle est une régression linéaire simple qui a un R2 d'environ 50%. Il a donc une meilleure qualité prédictive que le premier modèle du fait qu'il capte une partie de la variance des données, ici à travers une corrélation positive entre &lt;code&gt;X&lt;/code&gt; et &lt;code&gt;Y&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;Le troisième modèle est un modèle polynomial dont on voit qu'il est plus ajusté que le second. Les points prédits (en vert) par la courbe sont en effet plus proche des points que pour le précédent modèle et mécaniquement cela fait augmenter le R2. Le fait d'utiliser un modèle polynomial a donné au modèle une plus grande souplesse ce qui lui a permis de se rapprocher de certains points extrêmes qui étaient éloignés de la droite de régression du second modèle.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ainsi, plus la variance augmente, plus le modèle prédit en moyenne des valeurs proches de leurs vraies valeurs, ce qui fait diminuer le biais, puisqu'il est défini comme l'écart entre notre fonction de prédiction et une fonction qui permettrait de prédire parfaitement les données observées.  &lt;/p&gt;
&lt;h1 id="enjeux-de-larbitrage-biais-variance"&gt;Enjeux de l'arbitrage biais variance&lt;/h1&gt;
&lt;p&gt;D'après ce qu'on a vu, pourquoi alors ne pas simplement chercher à maximiser la variance pour minimiser le biais, c'est-à-dire son écart aux vraies valeurs? Tout simplement parce que dans le cas de la construction d'un modèle de prédiction, nous modélisons des relations entre des données à partir d'un échantillon pour prédire un résultat sur une nouvelle population. C'est donc la performance de ce modèle sur de nouvelles données qui va nous intéresser. Or, comme vous avez pu le pressentir en observant les graphiques précédents, &lt;strong&gt;un modèle avec une variance très élevée se généralise mal à de nouvelles données&lt;/strong&gt;. D'un autre côté, &lt;strong&gt;un modèle avec une faible variance aura lui aussi une qualité prédictive très faible&lt;/strong&gt; car il captera mal une éventuelle relation entre les variables.&lt;/p&gt;
&lt;p&gt;Tout le problème de cet arbitrage (ou dilemme) biais variance est donc de &lt;strong&gt;trouver un modèle qui ait une variance suffisamment forte pour limiter le biais mais suffisamment faible pour qu'il soit généralisable&lt;/strong&gt;. Les modèles précédents avaient été entraînés sur une base de données qui était un échantillon aléatoire correspondant à 10% des données d'un échantillon plus important. Pour mesurer la qualité prédictive de ces modèles on les applique donc aux données entières et on calcule l'écart moyen au carré de la prédiction à la vraie valeur, c'est-à-dire l'erreur quadratique moyenne ou en anglais &lt;strong&gt;MSE&lt;/strong&gt; pour &lt;em&gt;Mean Squared Error&lt;/em&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/biais_variance/unnamed-chunk-2-1.png"&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;On constate que, comme attendu, le modèle avec le plus de variance se généralise mal à des données non connues et présente une erreur de prédiction supérieure à celle du modèle linéaire simple. En effet, les variations de la courbe polynomiale qui lui permettait de coller au plus près des données sur lesquelles elle a été construite entraîne beaucoup de prédictions très éloignées de la vraie valeur des nouvelles données.&lt;br&gt;
L'erreur attendue d'un modèle de prédiction sur des données sur lesquelles il ne s'est pas entraîné peut en effet se décomposer en &lt;strong&gt;la somme du biais au carré et de la variance de ce modèle, c'est la décomposition biais-variance de l'erreur quadratique&lt;/strong&gt;. Si vous préférez vous en convaincre avec la formule et la démonstration mathématique, vous pouvez vous référer à &lt;a href="https://fr.wikipedia.org/wiki/Dilemme_biais-variance#Décomposition_biais-variance_de_l'erreur_quadratique"&gt;la page wikipédia qui en parle&lt;/a&gt;. Comme le biais diminue avec la variance, il faut donc trouver un niveau de complexité du modèle qui permette à la fois de minimiser l'écart à la vraie valeur (faible biais en augmentant la variance) et d'être généralisable en dehors de son échantillon d'entraînement (faible variance).&lt;/p&gt;
&lt;h1 id="liens-avec-loverfitting-et-lunderfitting-dans-les-modeles-de-machine-learning"&gt;Liens avec l'overfitting et l'underfitting dans les modèles de Machine Learning&lt;/h1&gt;
&lt;h2 id="appelons-un-chat-un-chat"&gt;Appelons un chat un chat&lt;/h2&gt;
&lt;p&gt;Le principe de l'apprentissage automatique supervisé est le même que celui qu'on a présenté jusqu'à maintenant : on renseigne au modèle des variables explicatives (&lt;code&gt;X&lt;/code&gt;) et une variable d'intérêt (&lt;code&gt;Y&lt;/code&gt;) qu'on aimerait pouvoir ensuite prédire à partir de nouvelles données &lt;code&gt;X&lt;/code&gt;. Par exemple, on renseigne des photos de chats et de chiens étiquettées : &lt;code&gt;Y&lt;/code&gt; est alors le label "chien" ou "chat" de la photo, &lt;code&gt;X&lt;/code&gt; la matrice de pixels de la photo. Le modèle devra être ensuite capable de prédire à partir d'une photo qu'il n'a jamais vue si celle-ci représente un chat ou un chien. Pour mesurer la qualité prédictive de notre modèle, on réserve des données labellisées sur lesquelles il ne s'entraînera pas. On va ensuite lui demander de prédire les labels déjà connus de ces données, ce qui va nous permettre d'évaluer la qualité de ces prédictions. Cet échantillon est en général appelé &lt;strong&gt;échantillon test&lt;/strong&gt; (&lt;em&gt;test set&lt;/em&gt; en anglais), et les données sur lesquelles le modèle est entraîné s'appelle l'&lt;strong&gt;échantillon d'entraînement&lt;/strong&gt; (&lt;em&gt;train set&lt;/em&gt;). En général, si l'on dispose de suffisamment de données, on n'aura pas trop de mal à construire un modèle qui parviendra à labelliser quasiment parfaitement &lt;strong&gt;nos données d'entraînement&lt;/strong&gt;. Tout le problème est d'avoir un modèle qui se généralise correctement à de nouvelles données.&lt;/p&gt;
&lt;h2 id="courbe-dapprentissage-dun-modele"&gt;Courbe d'apprentissage d'un modèle&lt;/h2&gt;
&lt;p&gt;Pour schématiser, imaginons que dans les données d'entraînement les chiens soient en général photographiées à l'extérieur et les chats à l'intérieur. Si mon modèle a une forte variance, cela signifie qu'il va prendre en compte beaucoup de détails de la photo. Il va par exemple donner du poids aux éléments de fond dans sa prédiction et sera incapable de labelliser correctement un chien photographié à l'intérieur. Un modèle bien plus basique qui se serait appuyé par exemple uniquement sur la forme des oreilles de l'animal aurait peut-être de meilleurs résultats.&lt;br&gt;
Dans le premier cas, on dit que l'on est dans une situation de &lt;strong&gt;surapprentissage, ou overfitting&lt;/strong&gt;. Le modèle a intégré des éléments anecdotiques, du bruit, dans son processus décisionnel et cela va réduire sa performance prédictive sur des données non connues. Autrement dit, &lt;strong&gt;sa variance est trop élevée&lt;/strong&gt;. Si au contraire le modèle est trop peu complexe et n'a pas intégré assez d'informations pour différencier un chat d'un chien même sur les données d'apprentissage, on dit qu'il est dans un état de &lt;strong&gt;sous-apprentissage, ou underfitting&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;Dans les deux cas, le modèle va avoir de mauvaises performances prédictives sur des nouvelles données&lt;/strong&gt;. Ce constat peut être schématisé de la manière suivante :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/biais_variance/courb_apprent.png"&gt;  &lt;/p&gt;
&lt;p&gt;Notons bien ici que cette relation entre complexité du modèle et décomposition de l'erreur de prédiction s'entend &lt;strong&gt;à taille d'échantillon fixée&lt;/strong&gt;. Ainsi, plus l'échantillon sera grand, plus le modèle pourra être complexe avant d'entrer dans la phase de surapprentissage.  &lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Dans le cadre d'une &lt;strong&gt;démarche prédictive&lt;/strong&gt;, il est donc tout à fait naturel de limiter l'apprentissage du modèle pour optimiser ses capacités prédictives. Cela peut être fait en réduisant le nombre de variables prédictives utilisées, en limitant le nombre de couches de neurones dans un réseau, mais aussi en utilisant des méthodes de réduction des dimensions, comme &lt;a href="https://blog.statoscop.fr/acp-python.html"&gt;nous vous l'avions montré avec l'analyse en composantes principales&lt;/a&gt;. Bien sûr, dans une &lt;strong&gt;démarche explicative&lt;/strong&gt;, il sera au contraire normal de sacrifier éventuellement une meilleure capacité prédictive pour mettre en évidence une relation avec une variable explicative. Si vous souhaitez aller plus loin, vous pouvez parcourir l'excellente étude de &lt;a href="https://www.stat.berkeley.edu/~aldous/157/Papers/shmueli.pdf"&gt;Shmueli, 2010&lt;/a&gt; qui expose les enjeux croisés des démarches explicative et prédictive dans la modélisation.&lt;br&gt;
Il me reste à remercier &lt;a href="https://twitter.com/EParoissien"&gt;Emmanuel Paroissien&lt;/a&gt;, chercheur à l'Inra, pour nos échanges qui m'ont aidé à construire cette note. N'hésitez pas à &lt;a href="https://www.statoscop.fr"&gt;visiter notre site&lt;/a&gt; et à nous suivre sur &lt;a href="https://twitter.com/stato_scop"&gt;Twitter&lt;/a&gt; et &lt;a href="https://www.linkedin.com/company/statoscop"&gt;Linkedin&lt;/a&gt;. Pour retrouver le code ayant servi à générer cette note, vous pouvez vous rendre sur le &lt;a href="https://github.com/Statoscop/notebooks-blog"&gt;dépôt github de nos notes de blog&lt;/a&gt;.  &lt;/p&gt;</content><category term="R"></category><category term="R"></category><category term="Rstats"></category><category term="data science"></category><category term="statistiques"></category><category term="Machine Learning"></category></entry><entry><title>Gestion des packages sur R avec renv</title><link href="https://blog.statoscop.fr/gestion-des-packages-sur-r-avec-renv.html" rel="alternate"></link><published>2021-10-07T00:00:00+02:00</published><updated>2021-10-07T00:00:00+02:00</updated><author><name>Antoine</name></author><id>tag:blog.statoscop.fr,2021-10-07:/gestion-des-packages-sur-r-avec-renv.html</id><summary type="html">&lt;p&gt;Présentation du gestionnaire de packages de R&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table des matières&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#interet-dun-gestionnaire-de-packages-dans-un-projet-avec-r"&gt;Intérêt d'un gestionnaire de packages dans un projet avec R&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#organisation-du-projet"&gt;Organisation du projet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avantages-dun-gestionnaire-de-packages-dans-un-projet-r"&gt;Avantages d'un gestionnaire de packages dans un projet R&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#votre-projet-sera-isole"&gt;Votre projet sera isolé&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#votre-projet-sera-portable-et-reproductible"&gt;Votre projet sera portable et reproductible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#utilisation-de-renv"&gt;Utilisation de renv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#initialisation-de-renv"&gt;Initialisation de renv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mettre-a-jour-les-dependances-avec-le-fichier-lock"&gt;Mettre à jour les dépendances avec le fichier lock&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#utilisation-de-renvrestore"&gt;Utilisation de renv::restore()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utilisation-de-renvsnapshot"&gt;Utilisation de renv::snapshot()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#petite-note-sur-git"&gt;Petite note sur git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;En 2019, je présentais brièvement le package &lt;code&gt;packrat&lt;/code&gt; dans &lt;a href="https://antoinesir.rbind.io/post/gestion-des-packages-sur-r-pr%C3%A9sentation-de-packrat/"&gt;un article de blog&lt;/a&gt;. Ce package R permettait de gérer les dépendances aux packages d'un projet R à la manière des environnements de Python. Il comportait cependant un certain nombre d'inconvénients, dont celui d'un temps long de téléchargement des packages. Depuis 2020, il a été remplacé par &lt;code&gt;renv&lt;/code&gt; qui gomme la plupart de ces défauts, et c'est l'occasion de vous montrer pourquoi et comment vous devriez vous servir d'un gestionnaire de packages pour vos projets R à partir d'un exemple concret!&lt;/p&gt;
&lt;p&gt;On commence cet article par la présentation du projet dont on se sert comme exemple et de l'intérêt d'un gestionnaire de packages avant d'illustrer l'utilisation de &lt;code&gt;renv&lt;/code&gt; dans ce contexte. Cet article a pour but de présenter un cas concret d'utilisation de &lt;code&gt;renv&lt;/code&gt; mais ne se substitue pas à la &lt;a href="https://rstudio.github.io/renv/articles/renv.html"&gt;documentation officielle du package&lt;/a&gt;.  &lt;/p&gt;
&lt;h1 id="interet-dun-gestionnaire-de-packages-dans-un-projet-avec-r"&gt;Intérêt d'un gestionnaire de packages dans un projet avec R&lt;/h1&gt;
&lt;p&gt;La première étape pour aller vers plus de reproductibilité sur R est de connaître le fonctionnement des projets (fichiers .Rproj), qui permettent d'ouvrir R à la racine de votre projet et de proposer un code avec seulement des chemins relatifs. Si vous n'êtes pas du tout familiers avec ce fonctionnement, je vous conseille de lire &lt;a href="http://larmarange.github.io/analyse-R/organiser-ses-fichiers.html"&gt;cet article&lt;/a&gt; de l'excellent blog de Joseph Larmarange.  &lt;/p&gt;
&lt;h2 id="organisation-du-projet"&gt;Organisation du projet&lt;/h2&gt;
&lt;p&gt;On propose pour illustrer le propos un projet tout simple dont l'organisation est présentée ci-dessous :  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/renv/orga_dossier.png"&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Ce projet contient un dossier &lt;code&gt;data&lt;/code&gt; dans lequel se trouve notre base de données et un dossier &lt;code&gt;scripts&lt;/code&gt; avec un code R contenant quelques traitements basiques. À la racine du dossier, on remarque également notre fichier &lt;code&gt;Presentation renv.Rproj&lt;/code&gt; qui définit donc l'emplacement de notre répertoire de travail. Le script R contient les instructions suivantes :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Chargement des packages&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dplyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Import des données&lt;/span&gt;
&lt;span class="n"&gt;mon_iris&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;data.table&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data/iris.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;mon_iris&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sepal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ce code tout simple permet donc de calculer la moyenne des largeur et longueur des sépales de la base de données &lt;code&gt;iris&lt;/code&gt;. L'utilisation d'un fichier .Rproj, d'un chemin relatif pour importer les données et le fait que les deux packages utilisés (&lt;code&gt;dplyr&lt;/code&gt; et &lt;code&gt;data.table&lt;/code&gt;) soient chargés explicitement semblent rendre la reproductibilité des résultats aisée : il me suffit de récupérer l'ensemble du dossier, d'installer les deux packages s'ils ne sont pas déjà installés et de faire tourner le code. Seulement, je pourrais avoir sur mon poste une version de dplyr installée trop ancienne et dans laquelle &lt;code&gt;across&lt;/code&gt; n'existerait pas encore. Bien sûr il suffirait ici de mettre à jour mon package, mais peut-être que la version la plus récente de &lt;code&gt;dplyr&lt;/code&gt; ne correspond pas non plus à la version du code utilisé par la personne ayant écrit le code, et que cela peut causer de nouveaux problèmes...&lt;/p&gt;
&lt;h2 id="avantages-dun-gestionnaire-de-packages-dans-un-projet-r"&gt;Avantages d'un gestionnaire de packages dans un projet R&lt;/h2&gt;
&lt;p&gt;Tout d'abord, sachez qu'en général les développeurs de package R, et en particulier ceux ayant un très grand nombre d'utilisateurs, portent une attention particulière à faire en sorte que les mises à jour ne "cassent" pas les codes existants, en d'autres termes que ce qui a été codé dans une ancienne version du package tourne toujours avec la nouvelle version. Ceci étant dit, une mise à jour peut toujours avoir des conséquences sur vos résultats (anticipés ou non par les développeurs) et il est bien plus facile d'utiliser un gestionnaire de packages, et nous allons vous expliquer pourquoi.  &lt;/p&gt;
&lt;h3 id="votre-projet-sera-isole"&gt;Votre projet sera isolé&lt;/h3&gt;
&lt;p&gt;Avec le système classique de packages R, tous les packages installés le sont dans un répertoire commun à votre ordinateur. Quand vous mettez à jour un package, l'ancienne version est écrasée et ce pour &lt;strong&gt;tous&lt;/strong&gt; vos projets. Ce que va permettre un gestionnaire de packages, c'est de faire dépendre une version d'un package à un projet en particulier. C'est ce qui va permettre à chacun de vos projets d'être &lt;strong&gt;isolés&lt;/strong&gt; les uns des autres. En plus, &lt;code&gt;renv&lt;/code&gt; fonctionne sur un système de caches qui lui permet malgré tout de ne pas avoir à télécharger deux fois la même version du même package si elle est utilisée dans deux projets différents. Cette propriété est particulièrement importante pour des gros projets pour lesquels vous n'auriez pas le temps d'adapter le code à une mise à jour d'un package, tout en voulant bénéficier de cette mise à jour pour vos autres travaux.  &lt;/p&gt;
&lt;h3 id="votre-projet-sera-portable-et-reproductible"&gt;Votre projet sera portable et reproductible&lt;/h3&gt;
&lt;p&gt;La portabilité d'un projet, c'est sa capacité à pouvoir tourner sur n'importe quelle machine, n'importe quel OS, etc... C'est ce qui permet sa reproductibilité, c'est-à-dire la capacité à reproduire les résultats dans des conditions identiques. C'est extrêmement précieux pour les projets en équipe mais aussi pour soi : en effet rien ne nous assure que notre projet codé il y a deux ans va tourner après les nombreuses mises à jour qu'ont dû subir les packages utilisés. &lt;code&gt;renv&lt;/code&gt; permet de répondre à cette problématique en vous renvoyant 2 ans en arrière dans le même environnement de packages, à condition bien sûr que les versions utilisées alors soient encore disponibles sur le CRAN ou sur la source de laquelle vous les avez téléchargés.  &lt;/p&gt;
&lt;h1 id="utilisation-de-renv"&gt;Utilisation de renv&lt;/h1&gt;
&lt;p&gt;Après, je l'espère, vous avoir convaincu de l'utilité d'un gestionnaire de packages, je vais vous présenter rapidement comment utiliser &lt;code&gt;renv&lt;/code&gt; dans le petit projet que je vous ai présenté.  &lt;/p&gt;
&lt;h2 id="initialisation-de-renv"&gt;Initialisation de &lt;code&gt;renv&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Pour commencer à utiliser le gestionnaire de packages, vous ouvrez votre projet dans RStudio et vous lancez dans la console &lt;code&gt;renv::init()&lt;/code&gt;. Votre projet va maintenant ressembler à ça :  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/renv/orga_dossier_renv.png"&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;On constate l'apparition d'un dossier &lt;code&gt;renv&lt;/code&gt;, qui contient les fichiers de lancement et de paramétrage du gestionnaire ainsi que les liens vers les packages à charger. Contrairement à &lt;code&gt;packrat&lt;/code&gt;, renv utilise en effet un cache dans lequel il installe les packages, ce qui permet de ne pas dupliquer l'installation de la même version du même package pour deux projets différents. Mais ce qui nous intéresse plus, c'est l'apparition à la racine du projet du fichier &lt;code&gt;renv.lock&lt;/code&gt;, qui ressemble à ça :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;R&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4.1.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Repositories&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CRAN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://cloud.r-project.org&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Packages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;R6&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Package&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;R6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.5.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Repository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Repository&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CRAN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b203113193e70978a696b2809525649d&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;cli&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Package&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cli&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.5.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Repository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Repository&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CRAN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a94ba44cee3ea571e813721e64184172&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;crayon&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Package&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;crayon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1.4.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Repository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Repository&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CRAN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;e75525c55c70e5f4f78c9960a4b402e9&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;data.table&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Package&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;data.table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1.14.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Repository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Repository&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CRAN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d1b8b1a821ee564a3515fa6c6d5c52dc&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le gestionnaire a repéré les packages utilisés dans mon script et a recensé toutes leurs informations utiles ainsi que celles de leurs dépendances : nom, version, source d'installation... Il renseigne aussi les caractéristiques du logiciel R installé sur mon poste. C'est à partir de ce fichier que le gestionnaire va ensuite être capable de vérifier l'adéquation de l'environnement de packages de l'utilisateur et celui enregistré le plus récemment. C'est aussi là qu'il va écrire les références des packages que j'installerai après avoir commencé à travailler sur le poste.  &lt;/p&gt;
&lt;p&gt;À noter que &lt;strong&gt;&lt;code&gt;renv&lt;/code&gt; peut aussi bien être utilisé au lancement de votre projet qu'au cours de celui-ci&lt;/strong&gt;. S'il est utilisé au lancement, vous enregistrerez dans le fichier lock les informations des packages au fur et à mesure de votre utilisation. Si le projet est déjà bien avancé comme dans notre exemple, il va partir d'un fichier lock contenant déjà les références des packages installés et utilisés. &lt;/p&gt;
&lt;h2 id="mettre-a-jour-les-dependances-avec-le-fichier-lock"&gt;Mettre à jour les dépendances avec le fichier lock&lt;/h2&gt;
&lt;p&gt;On présente les deux instructions les plus utiles de &lt;code&gt;renv&lt;/code&gt; : &lt;code&gt;restore()&lt;/code&gt; et &lt;code&gt;snapshot()&lt;/code&gt;. Ce sont elles qui permettent de raccorder l'état de votre environnement de packages en local par rapport à celui qui sera proposé à l'ouverture de votre projet &lt;code&gt;renv&lt;/code&gt;. C'est la fonction &lt;code&gt;status()&lt;/code&gt; qui permet de vérifier que votre environnement de packages utilisé à un moment T correspond bien à celui enregistré dans le fichier lock.   &lt;/p&gt;
&lt;h3 id="utilisation-de-renvrestore"&gt;Utilisation de &lt;code&gt;renv::restore()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Imaginons que j'ouvre ce même projet sur un autre poste sur lequel &lt;code&gt;data.table&lt;/code&gt; n'est pas installé. En ouvrant le projet RStudio je vais avoir un message d'avertissement m'indiquant que mon environnement pourrait ne pas être à jour du projet. Je lance alors &lt;code&gt;renv::status()&lt;/code&gt;, qui me renvoie en effet :  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/renv/warning_renv.png"&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;L'absence d'installation de &lt;code&gt;data.table&lt;/code&gt; a bien été repérée. Comme suggéré, il suffit de lancer &lt;code&gt;renv::restore()&lt;/code&gt; pour que mon environnement de packages soit de nouveau à jour avec celui décrit dans le fichier lock. Il aurait fallu aussi envoyer cette instruction si la version de &lt;code&gt;data.table&lt;/code&gt; enregistrée sur votre poste ne correspondait plus à celle enregistrée dans le fichier lock. Cette instruction sert donc à rendre mon environnement de packages en local cohérent avec celui renseigné dans le fichier lock.     &lt;/p&gt;
&lt;h3 id="utilisation-de-renvsnapshot"&gt;Utilisation de &lt;code&gt;renv::snapshot()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Je peux aussi vouloir changer le fichier lock suite à une évolution du code. Imaginons par exemple que je n'utilise plus &lt;code&gt;data.table&lt;/code&gt; pour importer mes données mais directement la fonction &lt;code&gt;read.csv()&lt;/code&gt;, qui fait partie des fonctions chargées automatiquement au lancement de RStudio. Cette modification des dépendances va être repérée et &lt;code&gt;renv::status()&lt;/code&gt; va renvoyer le message suivant :  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/renv/warning_renv2.png"&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Si au contraire j'avais installé et utilisé un nouveau package, c'est la même instruction qui m'aurait permis d'ajouter ses références au fichier lock. &lt;code&gt;renv::snapshot()&lt;/code&gt; permet donc de mettre à jour le fichier lock afin que mes modifications dans l'utilisation des packages soient prises en compte. &lt;strong&gt;Avant d'avoir lancé cette instruction, les modifications dans les dépendances de mon projet ne seront pas prises en compte par le gestionnaire de packages&lt;/strong&gt;.   &lt;/p&gt;
&lt;h2 id="petite-note-sur-git"&gt;Petite note sur git&lt;/h2&gt;
&lt;p&gt;Comme on l'a vu, l'utilisation de &lt;code&gt;renv&lt;/code&gt; est particulièrement intéressante dans le cadre d'un travail collaboratif. C'est donc naturellement qu'on l'utilisera avec git. Il est important de noter qu'il n'est pas nécessaire de versionner tout le dossier &lt;code&gt;renv&lt;/code&gt;, mais seulement le fichier lock, le script &lt;code&gt;renv/activate.R&lt;/code&gt; et le fichier &lt;code&gt;.Rprofile&lt;/code&gt; de la personne ayant initialisé le projet. Le reste du dossier &lt;code&gt;renv&lt;/code&gt; contient en effet des informations spécifiques à chaque poste, comme les liens vers le cache ayant stocké les packages installés. Il se mettra à jour automatiquement avec les trois fichiers versionnés. Pensez à vous &lt;a href="https://rstudio.github.io/renv/articles/collaborating.html"&gt;référer à la documentation avant de vous lancer&lt;/a&gt;.  &lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Vous l'avez compris, &lt;code&gt;renv&lt;/code&gt; est un outil très précieux pour s'assurer que d'autres personnes ou vous-même pourront refaire tourner votre code sans difficultés. Il est sans doute nécessaire, mais pas suffisant : certains packages ont des dépendances externes comme javascript, il faut bien sûr veiller à ce que les données soient accessibles et identiques pour tous et que les scripts ne contiennent pas de paramètres spécifiques à un utilisateur. &lt;br&gt;
En plus des qualités présentées dans l'article, &lt;code&gt;renv&lt;/code&gt; vous permettra aussi de vous rendre compte du nombre de packages sur lequel repose votre projet, qui ne se limitent pas qu'aux packages installés mais aussi à leurs dépendances. Cela peut être une bonne occasion d'essayer de les réduire dans la mesure du possible. Récemment, un frisson a parcouru les quelques milliers de développeurs de packages R dépendant du package &lt;code&gt;lubridate&lt;/code&gt; quand ils ont reçu un mail du CRAN leur annonçant que ce dernier risquait d'être supprimé et qu'ils devaient ajuster leurs packages en conséquence. Naturellement, au vu de la popularité de &lt;code&gt;lubridate&lt;/code&gt;, cela &lt;a href="https://twitter.com/dvaughan32/status/1445459240718458881"&gt;n'arrivera finalement pas&lt;/a&gt;, mais c'est un rappel utile de la fragilité relative d'un projet avec de trop nombreuses dépendances.&lt;/p&gt;</content><category term="R"></category><category term="R"></category><category term="Rstats"></category><category term="renv"></category><category term="packages"></category><category term="CRAN"></category></entry><entry><title>Fonctionnement et performances d'across dans dplyr</title><link href="https://blog.statoscop.fr/fonctionnement-et-performances-dacross-dans-dplyr.html" rel="alternate"></link><published>2021-06-02T00:00:00+02:00</published><updated>2021-06-02T00:00:00+02:00</updated><author><name>Antoine</name></author><id>tag:blog.statoscop.fr,2021-06-02:/fonctionnement-et-performances-dacross-dans-dplyr.html</id><summary type="html">&lt;p&gt;Mise à jour de l'évaluation des performances du verbe &lt;code&gt;across&lt;/code&gt; dans dplyr version 1.0.6&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table des matières&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#across-ca-marche-comment"&gt;across(), ça marche comment?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#syntaxe-de-base"&gt;Syntaxe de base&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#selection-avec-des-conditions"&gt;Sélection avec des conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#selection-a-partir-du-nom"&gt;Sélection à partir du nom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#autres-proprietes"&gt;Autres propriétés&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#across-ca-tourne-comment"&gt;across(), ça tourne comment?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#instructions-sur-lesquelles-on-compare-les-methodes"&gt;Instructions sur lesquelles on compare les méthodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resultats-de-la-version-106"&gt;Résultats de la version 1.0.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resultats-de-la-version-100"&gt;Résultats de la version 1.0.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;A la sortie de l'été dernier, j'ai réalisé une &lt;a href="https://antoinesir.rbind.io/post/fonctionnement-de-across-dans-dplyr/" target="_blank"&gt;note sur mon blog personnel&lt;/a&gt; sur un élément important d'une mise à jour majeure de dplyr : &lt;code&gt;across()&lt;/code&gt;, un nouveau verbe pour réaliser des opérations sur plusieurs colonnes. Dans cette note, on utilisait la version &lt;code&gt;1.0.2&lt;/code&gt; de &lt;code&gt;dplyr&lt;/code&gt; et on comparait &lt;code&gt;across&lt;/code&gt; aux verbes équivalents que cela devait remplacer (fonctions indexées par &lt;code&gt;_at&lt;/code&gt;, &lt;code&gt;_if&lt;/code&gt; et &lt;code&gt;_all&lt;/code&gt;) . On constatait une moins bonne performance d' &lt;code&gt;across&lt;/code&gt; en termes de temps d'exécution. Cet élément était bien connu des développeurs de RStudio et a été constamment pris en compte dans les différentes mises à jour. On reprend ici cette note en la mettant à jour avec la version &lt;code&gt;1.0.6&lt;/code&gt; de &lt;code&gt;dplyr&lt;/code&gt; disponible à ce jour pour voir où se place désormais &lt;code&gt;across&lt;/code&gt; en termes de temps d'exécution.&lt;/p&gt;
&lt;p&gt;Si vous voulez balayer plus largement les différents éléments de la mise à jour de &lt;code&gt;dplyr&lt;/code&gt;, vous pouvez vous rendre sur &lt;a href="https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/" target="_blank"&gt;le site du tidyverse&lt;/a&gt; (en anglais) ou sur &lt;a href="https://thinkr.fr/hey-quoi-de-neuf-dplyr-le-point-sur-la-v1/#La_fonction_de_calcul_avec_conditions_sur_les_variables_across()" target="_blank"&gt;cet article du blog de ThinkR&lt;/a&gt; (en français) qui en présentent les changements majeurs. &lt;/p&gt;
&lt;h1 id="across-ca-marche-comment"&gt;&lt;code&gt;across()&lt;/code&gt;, ça marche comment?&lt;/h1&gt;
&lt;h2 id="syntaxe-de-base"&gt;Syntaxe de base&lt;/h2&gt;
&lt;p&gt;Le verbe &lt;code&gt;across()&lt;/code&gt; vise à remplacer toutes les fonctions suffixées par &lt;code&gt;_if&lt;/code&gt;, &lt;code&gt;_at&lt;/code&gt; et &lt;code&gt;_all&lt;/code&gt;. Il regroupe ces méthodes dans une seule et permet ainsi de les associer, ce qui n'était pas possible avant. Il s'utilise dans &lt;code&gt;mutate&lt;/code&gt; et &lt;code&gt;summarise&lt;/code&gt;. La syntaxe associée à ce verbe est la suivante :   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;.cols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;.fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dans laquelle :&lt;br&gt;
 - Les colonnes &lt;code&gt;.cols&lt;/code&gt; peuvent être sélectionnées en utilisant la même syntaxe que pour la méthode &lt;code&gt;vars()&lt;/code&gt; (nom des variables, &lt;code&gt;starts_with&lt;/code&gt;, &lt;code&gt;end_with&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;,...), mais aussi avec des conditions rentrées dans &lt;code&gt;where()&lt;/code&gt; qui sélectionneront de la même manière que le faisaient les fonctions suffixées par &lt;code&gt;_if&lt;/code&gt;.&lt;br&gt;
 - La fonction &lt;code&gt;.fns&lt;/code&gt; est définie comme auparavant (le nom de la fonction ou sa définition "à la volée" avec &lt;code&gt;~ my_fun(.)&lt;/code&gt;).  &lt;/p&gt;
&lt;p&gt;On présente quelques exemples en utilisant la table &lt;code&gt;penguins&lt;/code&gt; promue par &lt;a href="https://github.com/allisonhorst/palmerpenguins" target="_blank"&gt;Allison Horst&lt;/a&gt; pour remplacer l'usage de la table iris. Vous pouvez l'obtenir depuis le package &lt;code&gt;palmerpenguins&lt;/code&gt; sur le CRAN.  &lt;/p&gt;
&lt;h2 id="selection-avec-des-conditions"&gt;Sélection avec des conditions&lt;/h2&gt;
&lt;p&gt;À partir de cette table, l'instruction visant à sortir la moyenne de toutes les variables numériques s'écrivait auparavant :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;penguins&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na.rm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 1 x 5&lt;/span&gt;
&lt;span class="c1"&gt;##   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year&lt;/span&gt;
&lt;span class="c1"&gt;##            &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;## 1           43.9          17.2              201.       4202. 2008.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Elle se réécrit avec &lt;code&gt;across()&lt;/code&gt; en utilisant &lt;code&gt;where()&lt;/code&gt; :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;penguins&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na.rm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 1 x 5&lt;/span&gt;
&lt;span class="c1"&gt;##   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year&lt;/span&gt;
&lt;span class="c1"&gt;##            &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;## 1           43.9          17.2              201.       4202. 2008.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="selection-a-partir-du-nom"&gt;Sélection à partir du nom&lt;/h2&gt;
&lt;p&gt;Si l'on souhaite sélectionner à partir du nom des variables, la nouvelle syntaxe est la suivante :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ancienne version&lt;/span&gt;
&lt;span class="n"&gt;penguins&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bill*|flipper*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na.rm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 1 x 3&lt;/span&gt;
&lt;span class="c1"&gt;##   bill_length_mm bill_depth_mm flipper_length_mm&lt;/span&gt;
&lt;span class="c1"&gt;##            &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;## 1           43.9          17.2              201.&lt;/span&gt;

&lt;span class="c1"&gt;# Avec across()&lt;/span&gt;
&lt;span class="n"&gt;penguins&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bill*|flipper*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na.rm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 1 x 3&lt;/span&gt;
&lt;span class="c1"&gt;##   bill_length_mm bill_depth_mm flipper_length_mm&lt;/span&gt;
&lt;span class="c1"&gt;##            &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;## 1           43.9          17.2              201.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="autres-proprietes"&gt;Autres propriétés&lt;/h2&gt;
&lt;p&gt;On note également qu'on peut combiner dorénavant les sélections sur les types des colonnes et sur leur nom dans une seule instruction &lt;code&gt;across()&lt;/code&gt;, ce qui n'était pas possible avant. Pour enlever les années des moyennes numériques, on peut par exemple écrire :   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;penguins&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na.rm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 1 x 4&lt;/span&gt;
&lt;span class="c1"&gt;##   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g&lt;/span&gt;
&lt;span class="c1"&gt;##            &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;## 1           43.9          17.2              201.       4202.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enfin, le paramètre &lt;code&gt;.names&lt;/code&gt; de &lt;code&gt;across()&lt;/code&gt; est également très pratique et permet notamment dans une instruction &lt;code&gt;mutate()&lt;/code&gt; de créer de nouvelles colonnes nommées à partir des anciennes auxquelles on peut se référer avec &lt;code&gt;.col&lt;/code&gt;. Par exemple, si je veux créer deux nouvelles colonnes passant les informations sur le bec en pouces mais en conservant les anciennes colonnes, je peux écrire :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;penguins&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;.&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.04&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;.names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pouces_{.col}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 5 x 4&lt;/span&gt;
&lt;span class="c1"&gt;##   bill_length_mm bill_depth_mm pouces_bill_length_mm pouces_bill_depth_mm&lt;/span&gt;
&lt;span class="c1"&gt;##            &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;                 &amp;lt;dbl&amp;gt;                &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;## 1           39.1          18.7                  1.56                0.748&lt;/span&gt;
&lt;span class="c1"&gt;## 2           39.5          17.4                  1.58                0.696&lt;/span&gt;
&lt;span class="c1"&gt;## 3           40.3          18                    1.61                0.72 &lt;/span&gt;
&lt;span class="c1"&gt;## 4           NA            NA                   NA                  NA    &lt;/span&gt;
&lt;span class="c1"&gt;## 5           36.7          19.3                  1.47                0.772&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="across-ca-tourne-comment"&gt;&lt;code&gt;across()&lt;/code&gt;, ça tourne comment?&lt;/h1&gt;
&lt;p&gt;À la sortie de la mise à jour de &lt;code&gt;dplyr&lt;/code&gt;, il avait été signalé que la méthode &lt;code&gt;across()&lt;/code&gt; impliquerait peut-être de légères pertes en termes de vitesse d'exécution par rapport aux anciennes méthodes &lt;code&gt;_at&lt;/code&gt;, &lt;code&gt;_if&lt;/code&gt; et &lt;code&gt;_all&lt;/code&gt;. On a mis en évidence ce problème avec la version &lt;code&gt;1.0.2&lt;/code&gt; de dplyr dans &lt;a href="https://antoinesir.rbind.io/post/fonctionnement-de-across-dans-dplyr/" target="_blank"&gt;la première version de cet article&lt;/a&gt;. Sur ce même modèle, on va comparer les instructions &lt;code&gt;_if&lt;/code&gt; et &lt;code&gt;_at&lt;/code&gt; d'un summarise groupé avec leurs équivalents dans &lt;code&gt;across()&lt;/code&gt; pour différentes tailles d'échantillons et de groupes.   &lt;/p&gt;
&lt;h2 id="instructions-sur-lesquelles-on-compare-les-methodes"&gt;Instructions sur lesquelles on compare les méthodes&lt;/h2&gt;
&lt;p&gt;On crée un tibble comportant 4 variables numériques et une variable facteur, et on va comparer la vitesse d'exécution des moyennes de ces variables numériques groupées par modalité de la variable facteur en faisant varier le nombre de lignes du tibble et le nombre de groupes (de modalités distinctes de la variable facteur). Le tibble est créé par exemple ainsi, pour 100 lignes et deux groupes :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;nbrow&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;nbgpe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nf"&gt;as_tibble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbrow&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nf"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbrow&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                     &lt;span class="n"&gt;x3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbrow&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbrow&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;as.factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbgpe&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                               &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;arrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;## # A tibble: 100 x 5&lt;/span&gt;
&lt;span class="c1"&gt;##       x1    x2    x3    x4 y    &lt;/span&gt;
&lt;span class="c1"&gt;##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;##  1 -3.36  0.9   0.32  0.36 2    &lt;/span&gt;
&lt;span class="c1"&gt;##  2 -3.04  0.92  0.61  0.46 2    &lt;/span&gt;
&lt;span class="c1"&gt;##  3 -2.4   1.37  0.32  0.98 2    &lt;/span&gt;
&lt;span class="c1"&gt;##  4 -2.08  1.64  0.87  0.72 2    &lt;/span&gt;
&lt;span class="c1"&gt;##  5 -2.05  1.22  0.62  0.79 2    &lt;/span&gt;
&lt;span class="c1"&gt;##  6 -1.78 -1.28  0.58  0.31 2    &lt;/span&gt;
&lt;span class="c1"&gt;##  7 -1.56  1.19  0.96  0.58 2    &lt;/span&gt;
&lt;span class="c1"&gt;##  8 -1.55 -1.18  0.4   0.85 2    &lt;/span&gt;
&lt;span class="c1"&gt;##  9 -1.47  1.77  0.71  0.21 2    &lt;/span&gt;
&lt;span class="c1"&gt;## 10 -1.29 -0.6   0.68  0.4  2    &lt;/span&gt;
&lt;span class="c1"&gt;## # … with 90 more rows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sur chaque tibble (chaque combinaison du nombre de lignes et de groupes), les différentes instructions testées sont les suivantes :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# summarise_if  &lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# across + where()  &lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  

&lt;span class="c1"&gt;# summarise_at  &lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# across + starts_with()  &lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Toutes les instructions font la même chose : une moyenne groupée par &lt;code&gt;y&lt;/code&gt; des 4 variables numériques. L'idée est de vérifier que l'option &lt;code&gt;across&lt;/code&gt; n'est pas plus lente que les options &lt;code&gt;summarise_if&lt;/code&gt; et &lt;code&gt;summarise_at&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="resultats-de-la-version-106"&gt;Résultats de la version 1.0.6&lt;/h2&gt;
&lt;p&gt;Les résultats du &lt;code&gt;microbenchmark()&lt;/code&gt; pour les différentes combinaisons de nombres de groupes et de lignes sont présentés dans un graphique qui représente la distribution du temps d’exécution des 10 occurences testées pour chaque méthode :     &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/across_files/unnamed-chunk-10-1.png"&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Sur nos exemples, il semblerait qu'&lt;code&gt;across&lt;/code&gt; ait complètement rattrapé son retard sur ses équivalents &lt;code&gt;_at&lt;/code&gt; et &lt;code&gt;_if&lt;/code&gt;. Il semble même légèrement plus performant dans certains cas de figure.  &lt;/p&gt;
&lt;h2 id="resultats-de-la-version-100"&gt;Résultats de la version 1.0.0&lt;/h2&gt;
&lt;p&gt;Pour illustrer le chemin parcouru, on peut refaire tourner cette même comparaison avec la version &lt;code&gt;1.0.0&lt;/code&gt; de &lt;code&gt;dplyr&lt;/code&gt; :  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican" src="../images/across_files/unnamed-chunk-11-1.png"&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;On constate bien que dans sa première version, &lt;code&gt;across&lt;/code&gt; connaissait de bien moins bonnes performances, en particulier sur les dataframes avec beaucoup de lignes et/ou beaucoup de groupes. Les mises à jour successives ont donc bien permis de combler ces problèmes de performance et c'est une excellente nouvelle car au niveau de la syntaxe, nous, on adore!  &lt;/p&gt;
&lt;p&gt;C'est tout pour aujourd'hui ! Comme d'habitude vous pouvez retrouver le fichier Rmarkdown ayant servi à générer cette note sur le &lt;a href="https://github.com/Statoscop/notebooks-blog" target="_blank"&gt;github de Statoscop&lt;/a&gt;.&lt;/p&gt;</content><category term="R"></category><category term="R"></category><category term="Rstats"></category><category term="dplyr"></category><category term="across"></category><category term="tidyverse"></category></entry><entry><title>Comparaisons base R, dplyr et data.table</title><link href="https://blog.statoscop.fr/comparaisons-base-dplyr-datatable.html" rel="alternate"></link><published>2021-03-30T00:00:00+02:00</published><updated>2021-03-30T00:00:00+02:00</updated><author><name>Antoine</name></author><id>tag:blog.statoscop.fr,2021-03-30:/comparaisons-base-dplyr-datatable.html</id><summary type="html">&lt;p&gt;Comparaisons des temps d'exécution de base R, dplyr et data.table sur quelques cas d'étude&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table des matières&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rappels-sur-dplyr-et-datatable"&gt;Rappels sur dplyr et data.table&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dplyr-et-le-tidyverse"&gt;dplyr et le tidyverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#datatable"&gt;Data.table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vitesses-dexecution"&gt;Vitesses d'exécution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparaisons-sur-une-etude-de-cas-simple"&gt;Comparaisons sur une étude de cas simple&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#notre-etude-de-cas"&gt;Notre étude de cas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#moyenne-des-retards-et-fusion-des-tables"&gt;Moyenne des retards et fusion des tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparaisons-des-vitesses-dexecution"&gt;Comparaisons des vitesses d'exécution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Cet article est une mise à jour de l'article du &lt;a href="https://antoinesir.rbind.io/post/comparaisons-base-r-dplyr-data-table/" target="_blank"&gt;blog d'Antoine&lt;/a&gt; réalisé en 2018. L'idée est de comparer les performances de trois alternatives dans R pour l'analyse de données : &lt;br&gt;
- l'utilisation des seules fonctions de base R&lt;br&gt;
- dplyr&lt;br&gt;
- data.table  &lt;/p&gt;
&lt;h1 id="rappels-sur-dplyr-et-datatable"&gt;Rappels sur dplyr et data.table&lt;/h1&gt;
&lt;p&gt;On rappelle ici les principales caractéristiques de ces packages mais pour se former à leur utilisation on peut se référer au &lt;a href="https://teaching.slmc.fr/perf/presentation_handout.pdf" target="_blank"&gt;cours de perfectionnement de Martin Chevalier&lt;/a&gt;. Pour une exploration de ce qu'englobe le &lt;code&gt;tidyverse&lt;/code&gt; et notamment une présentation des commandes de &lt;code&gt;dplyr&lt;/code&gt;, vous pouvez jeter un oeil à &lt;a href="https://juba.github.io/tidyverse/index.html" target="_blank"&gt;l'introduction à R et au tidyverse&lt;/a&gt; de J. Barnier. Enfin pour data.table, on trouve des informations utiles sur le cours &lt;a href="http://larmarange.github.io/analyse-R/manipulations-avancees-avec-data-table.html" target="_blank"&gt;Manipulations avancée avec data.table&lt;/a&gt; de J. Larmarange et on vous conseille l'excellent article &lt;a href="https://atrebas.github.io/post/2020-06-17-datatable-introduction/" target="_blank"&gt;a gentle introduction to data.table&lt;/a&gt;.  &lt;/p&gt;
&lt;h2 id="dplyr-et-le-tidyverse"&gt;dplyr et le tidyverse&lt;/h2&gt;
&lt;p&gt;Le &lt;code&gt;tidyverse&lt;/code&gt; (contraction de "tidy" et "universe") est un concept initié par Hadley Wickham, chef statisticien de RStudio. Il regroupe un ensemble de packages utiles au traitement statistique et au nettoyage de bases de données. On va s'intéresser ici presque seulement au package &lt;code&gt;dplyr&lt;/code&gt; (dont les instructions seront appliquées aux &lt;code&gt;tibbles&lt;/code&gt;, un format de data.frame issu du &lt;code&gt;tidyverse&lt;/code&gt;), mais vous pouvez parcourir les packages proposés dans le tidyverse sur &lt;a href="https://www.tidyverse.org/" target="_blank"&gt;le site officiel&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt; propose un ensemble d'opérations de traitement de données sous une syntaxe différente de celle utilisée dans les fonctions de base de R. Ce langage présente le double avantage d'être à la fois lisible pour quelqu'un habitué aux langages tels que SAS ou SQL et de proposer des fonctions optimisées qui présentent de bonnes performances en termes de temps d'exécution. La grammaire &lt;code&gt;dplyr&lt;/code&gt; s'appuie en effet sur des fonctions au nom explicite :  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutate(data, newvar1=fonction(var1,var2...))&lt;/code&gt; et &lt;code&gt;transmute(data, newvar1=fonction(var1,var2...))&lt;/code&gt; créent de nouvelles variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter(data, condition)&lt;/code&gt; sélectionne au sein d'une table certaines observations, à la manière de &lt;code&gt;where&lt;/code&gt; dans SAS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange(data, var1, descending var2,...)&lt;/code&gt; trie une base selon une ou plusieurs variables (l'équivalent d'une &lt;code&gt;proc sort&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select(data, var1 : varX)&lt;/code&gt; sélectionne certaines variables dans une base, à la manière de &lt;code&gt;keep&lt;/code&gt; dans SAS. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarise(data, newvar1=mean(var1), newvar2=sum(var2))&lt;/code&gt; réalise toute sorte d'opérations statistiques sur une table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_by(data, var)&lt;/code&gt; regroupe une table par une variable&lt;/li&gt;
&lt;li&gt;et bien d'autres...  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un aspect pratique de ce langage est que toutes ces opérations peuvent être chaînées à l'aide de l'opérateur &lt;code&gt;%&amp;gt;%&lt;/code&gt; ("pipe" en anglais, issu du package &lt;code&gt;magrittr&lt;/code&gt;) dont la syntaxe est la suivante : &lt;code&gt;data %&amp;gt;% fonction(...)&lt;/code&gt; est équivalent à &lt;code&gt;fonction(data, ...)&lt;/code&gt;. Cette syntaxe permet de chaîner un grand nombre d'opérations sur une base commune, en limitant le nombre de fois où l'on écrit des tables intermédiaires tout en conservant une grande lisibilité du code. Ce petit exemple vous en convaincra peut-être :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dplyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# on crée un data frame avec 100 lignes, &lt;/span&gt;
&lt;span class="c1"&gt;# chaque individu appartenant à un des 50 groupes&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;idgpe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# on y applique les instructions de dplyr&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;as_tibble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idgpe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;output_tibble&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Un regard peu habitué contesterait peut-être l'aspect très lisible de l'instruction, mais ça l'est réellement. Le déroulé est le suivant :  &lt;/p&gt;
&lt;p&gt;1) on transforme notre data.frame en tibble (pour rappel : format optimisé de data.frame pour dplyr) avec &lt;code&gt;as_tibble&lt;/code&gt;&lt;br&gt;
2) on crée une variable &lt;code&gt;var&lt;/code&gt; avec &lt;code&gt;mutate&lt;/code&gt;&lt;br&gt;
3) on agrège par  &lt;code&gt;idgpe&lt;/code&gt; avec &lt;code&gt;group_by&lt;/code&gt; &lt;br&gt;
4) on calcule la moyenne de &lt;code&gt;var&lt;/code&gt; avec &lt;code&gt;summarise&lt;/code&gt;, que l'on stocke dans &lt;code&gt;var_mean&lt;/code&gt;. Comme cette instruction suit un group_by, elle est réalisée à l'intérieur de chaque groupe (défini par &lt;code&gt;idgpe&lt;/code&gt;), sinon elle aurait été réalisé sur l'ensemble de la table.    &lt;/p&gt;
&lt;p&gt;Tout cela est stocké dans une table output_tibble, qui est ainsi un tibble agrégé par &lt;code&gt;idgpe&lt;/code&gt; et qui a donc 50 lignes. L'intérêt de ce chaînage est qu'il permet une économie de code et d'écriture d'éventuelles tables intermédiaires.  &lt;/p&gt;
&lt;h2 id="datatable"&gt;Data.table&lt;/h2&gt;
&lt;p&gt;Le package &lt;code&gt;data.table&lt;/code&gt; ne prétend pas, contrairement au &lt;code&gt;tidyverse&lt;/code&gt;, proposer une syntaxe concurrente à base R mais enrichir celle-ci. Il est axé autour d'un nouveau format d'objet, le data.table, qui est un type de data.frame qui permet une utilisation optimisée de l'opérateur &lt;code&gt;[&lt;/code&gt;.&lt;br&gt;
Tout data.frame peut être converti en data.table grâce à la fonction &lt;code&gt;as.data.table&lt;/code&gt;, ou, de manière plus optimale pour l'utilisation de la mémoire, grâce à la fonction &lt;code&gt;setDT&lt;/code&gt; qui permet de directement transformer la nature de l'objet sans avoir à en écrire un autre. Il est important d'avoir en tête qu'un data.frame converti en data.table conserve les caractéristiques d'un data.frame. Cependant, l'opérateur &lt;code&gt;[&lt;/code&gt; appliqué au data.table change de signification et devient :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;DT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Avec &lt;code&gt;i&lt;/code&gt; qui permet de sélectionner des observations (sans avoir besoin de répéter le nom de la base dans laquelle on se trouve), &lt;code&gt;j&lt;/code&gt; qui permet de créer ou sélectionner des variables et &lt;code&gt;by&lt;/code&gt; de regrouper les traitement selon les modalités d'une variable définie. Comme dans &lt;code&gt;dplyr&lt;/code&gt;, il est possible de chaîner les opérations réalisées comme le montre l'exemple suivant, qui reprend le même cas de figure que celui illustrant le package &lt;code&gt;dplyr&lt;/code&gt; :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data.table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# on convertit notre data frame précédemment créé en data.table&lt;/span&gt;
&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.data.table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# on y applique les même instructions&lt;/span&gt;
&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idgpe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idgpe&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;output_dt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le fait de renseigner les variables au sein de &lt;code&gt;list()&lt;/code&gt; permet d'avoir une table en sortie au niveau de &lt;code&gt;idgpe&lt;/code&gt; (donc 50 observations), sans cela la variable est bien moyennée par groupe mais la table en sortie est toujours au niveau &lt;code&gt;id1&lt;/code&gt; (100 observations).   &lt;/p&gt;
&lt;h2 id="vitesses-dexecution"&gt;Vitesses d'exécution&lt;/h2&gt;
&lt;p&gt;Voilà donc pour les présentations! Allez, on montre le résultat d'un petit &lt;code&gt;microbenchmark&lt;/code&gt; des deux juste pour voir : &lt;/p&gt;
&lt;table class="dataframe"&gt;
&lt;caption&gt;Temps d'exécution en microsecondes&lt;/caption&gt;
&lt;thead&gt;
    &lt;tr&gt;&lt;th scope=col&gt;expr&lt;/th&gt;&lt;th scope=col&gt;lq&lt;/th&gt;&lt;th scope=col&gt;mean&lt;/th&gt;&lt;th scope=col&gt;uq&lt;/th&gt;&lt;th scope=col&gt;neval&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;dplyr     &lt;/td&gt;&lt;td&gt;9.79270&lt;/td&gt;&lt;td&gt;13.23297&lt;/td&gt;&lt;td&gt;14.367579&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;data.table&lt;/td&gt;&lt;td&gt;1.40644&lt;/td&gt;&lt;td&gt; 2.13729&lt;/td&gt;&lt;td&gt; 2.546176&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Sur cet exemple, on voit un avantage clair à data.table! Mais on est sur une toute petite table en entrée. On va essayer de se rapprocher de cas plus concrets en s'intéressant à un exemple sur des bases plus importantes.  &lt;/p&gt;
&lt;h1 id="comparaisons-sur-une-etude-de-cas-simple"&gt;Comparaisons sur une étude de cas simple&lt;/h1&gt;
&lt;p&gt;Les avantages et inconvénients de ces deux packages sont à l'origine de nombreux débats. Vous pouvez vous en convaincre en suivant &lt;a href="https://stackoverflow.com/questions/21435339/data-table-vs-dplyr-can-one-do-something-well-the-other-cant-or-does-poorly" target="_blank"&gt;cette discussion sur stackoverflow&lt;/a&gt;. On peut quand même dégager deux compromis :   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Le choix de l'un ou l'autre des packages dépend beaucoup de ce que l'on va en faire (types d'analyses, taille des données, profils des utilisateurs du code...).   &lt;/li&gt;
&lt;li&gt;Les deux packages sont plus intéressants que base R pour l'analyse de données, que ce soit en termes de facilité d'écriture ou de performances.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour ce deuxième point, on va essayer de s'en convaincre ensemble avec ce petit exemple.&lt;/p&gt;
&lt;h2 id="notre-etude-de-cas"&gt;Notre étude de cas&lt;/h2&gt;
&lt;p&gt;Pour cet exemple, on utilise les données du package de Hadley Wickham que l'on trouve dans &lt;code&gt;nycflights13&lt;/code&gt;. En particulier, la base &lt;code&gt;flights&lt;/code&gt; donne toutes les heures de départ et d'arrivée selon les aéroports de départ et d'arrivée ainsi que les retards au départ et à l'arrivée. La base &lt;code&gt;weather&lt;/code&gt; donne elle des indications météo, heure par heure, dans chaque aéroport. &lt;br&gt;
Commençons par charger nos packages (n'oubliez pas de faire &lt;code&gt;install.packages("nom_pck")&lt;/code&gt; avant si vous ne l'avez jamais fait) et nos données : &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Les packages nécessaires&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tidyverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Regroupe différents packages, voir https://www.tidyverse.org/ &lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data.table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;microbenchmark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Pour les calculs de vitesse d&amp;#39;exécution&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nycflights13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Pour les données&lt;/span&gt;

&lt;span class="c1"&gt;# data.table pour tests avec data.table&lt;/span&gt;
&lt;span class="n"&gt;flightsdt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.data.table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;weatherdt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.data.table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="moyenne-des-retards-et-fusion-des-tables"&gt;Moyenne des retards et fusion des tables&lt;/h2&gt;
&lt;p&gt;Un rapide examen des bases vous montre que la première étape avant toute analyse est comme souvent de regrouper les éléments de flights par heure et aéroport de départ pour pouvoir les fusionner avec la table weather, qui donnent les indications météo minute par minute. On écrit cette instruction de  3 manières différentes :  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;En base R&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;flights_time_hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;aggregate.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;arr_delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
         &lt;span class="n"&gt;dep_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dep_delay&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time_hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
         &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;output_base&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flights_time_hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                     &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time_hour&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                     &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;En dplyr&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_delay&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;dep_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dep_delay&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;ungroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;inner_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time_hour&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;output_dplyr&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;En data.table&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;output_DT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flightsdt&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_perc_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_delay&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                    &lt;span class="n"&gt;dep_perc_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dep_delay&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; 
                             &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time_hour&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; 
                   &lt;span class="n"&gt;weatherdt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                   &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time_hour&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On utilise la fonction &lt;code&gt;merge&lt;/code&gt; plutôt que &lt;code&gt;DT1[DT2, on = c("time_hour", "origin"), nomatch = 0]&lt;/code&gt; car on a constaté qu'elle était plus rapide, conformément à ce que montre bien cet &lt;a href="https://jozefhajnala.gitlab.io/r/r006-merge/" target="_blank"&gt;article du Jozef's Rblog&lt;/a&gt;.  &lt;/p&gt;
&lt;h2 id="comparaisons-des-vitesses-dexecution"&gt;Comparaisons des vitesses d'exécution&lt;/h2&gt;
&lt;p&gt;Chacun jugera de la lisibilité de chacune de ces instructions, qui font toutes la même chose, car c'est finalement assez subjectif. On donne ici les résultats d'un &lt;code&gt;microbenchmark&lt;/code&gt; de ces instructions : &lt;/p&gt;
&lt;table class="dataframe"&gt;
&lt;caption&gt;Temps d'exécution en millisecondes&lt;/caption&gt;
&lt;thead&gt;
    &lt;tr&gt;&lt;th scope=col&gt;expr&lt;/th&gt;&lt;th scope=col&gt;lq&lt;/th&gt;&lt;th scope=col&gt;mean&lt;/th&gt;&lt;th scope=col&gt;uq&lt;/th&gt;&lt;th scope=col&gt;neval&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;Base &lt;/td&gt;&lt;td&gt;1182.33161&lt;/td&gt;&lt;td&gt;1396.52780&lt;/td&gt;&lt;td&gt;1559.42968&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;dplyr&lt;/td&gt;&lt;td&gt; 223.45642&lt;/td&gt;&lt;td&gt; 313.16457&lt;/td&gt;&lt;td&gt; 360.95388&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;DT   &lt;/td&gt;&lt;td&gt;  22.83487&lt;/td&gt;&lt;td&gt;  24.68264&lt;/td&gt;&lt;td&gt;  26.32068&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Les résultats sont très nettement en faveur des packages &lt;code&gt;dplyr&lt;/code&gt; et &lt;code&gt;data.table&lt;/code&gt;. Ce dernier est même assez largement le plus rapide, son avantage s'étant accru depuis la première version de cette article. Sans doute existe-t-il des moyens de plus optimiser l'instruction en base R, mais là n'est pas vraiment la question. On voit qu'avec une syntaxe simple et lisible, &lt;code&gt;dplyr&lt;/code&gt; et &lt;code&gt;data.table&lt;/code&gt; font beaucoup mieux en termes de vitesse d'exécution que les fonctions de base R. &lt;/p&gt;</content><category term="R"></category><category term="R"></category><category term="Rstats"></category><category term="dplyr"></category><category term="data.table"></category><category term="benchmark"></category></entry></feed>